import { Injectable, ɵɵdefineInjectable, Inject, Input, Output, Component, ChangeDetectionStrategy, ViewChild, HostListener, Pipe, NgModule } from '@angular/core';
import { from, Subject } from 'rxjs';
import { init, PickerDisplayMode } from 'filestack-js';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FilestackService {
    /**
     * @private
     * @return {?}
     */
    get client() {
        if (!this.clientInstance) {
            throw new Error('FilestackService: client does not exist. Please initialize service via init method.');
        }
        return this.clientInstance;
    }
    /**
     * @private
     * @param {?} client
     * @return {?}
     */
    set client(client) {
        this.clientInstance = client;
    }
    /**
     * Set another client instance as this one used by FilestackService
     * @param {?} client - An instance of filestack client class
     * @return {?}
     */
    setClientInstance(client) {
        if (client) {
            this.client = client;
        }
    }
    /**
     * Initialize filestack client
     * @param {?} apikey - Filestack apikey
     * @param {?=} clientOptions - Client options
     * @return {?}
     */
    init(apikey, clientOptions) {
        this.client = init(apikey, clientOptions);
    }
    /**
     * Instance of picker class
     * @param {?=} options - picker options
     * @return {?}
     */
    picker(options) {
        return this.client.picker(options);
    }
    /**
     * Generate url with filestack transformations
     * @param {?} url - Filestack handle or external url
     * @param {?} options - Transformation options
     * @param {?=} b64 - Encode url params in base64
     * @return {?}
     */
    transform(url, options, b64) {
        return this.client.transform(url, options, b64);
    }
    /**
     * Access files via their Filestack handles
     * @param {?} handle - Filestack handle
     * @param {?=} options - Retrieve options
     * @param {?=} security - Filestack security object
     * @return {?}
     */
    retrieve(handle, options, security) {
        return from(this.client.retrieve(handle, options, security));
    }
    /**
     * Retrieve detailed data of stored files
     * @param {?} handle - Filestack handle
     * @param {?=} options - Metadata options
     * @param {?=} security - Filestack security object
     * @return {?}
     */
    metadata(handle, options, security) {
        return from(this.client.metadata(handle, options, security));
    }
    /**
     * Store a file from its URL
     * @param {?} url - Valid url to file
     * @param {?=} options - Store params
     * @param {?=} token - Optional control token to call .cancel()
     * @param {?=} security - Filestack security object
     * @return {?}
     */
    storeURL(url, options, token, security) {
        return from(this.client.storeURL(url, options, token, security));
    }
    /**
     * Upload a provided file
     * @param {?} file - A file to upload
     * @param {?=} options - Upload options
     * @param {?=} storeOptions - Store options
     * @param {?=} token - Optional control token to call .cancel()
     * @param {?=} security - Filestack security object
     * @return {?}
     */
    upload(file, options, storeOptions, token, security) {
        return from(this.client.upload(file, options, storeOptions, token, security));
    }
    /**
     * Remove a file from storage and the Filestack system
     * @param {?} handle - Filestack handle
     * @param {?} security - Filestack security object
     * @return {?}
     */
    remove(handle, security) {
        return from(this.client.remove(handle, security));
    }
    /**
     * Remove a file only from the Filestack system. The file remains in storage
     * @param {?} handle - Filestack handle
     * @param {?} security - Filestack security object
     * @return {?}
     */
    removeMetadata(handle, security) {
        return from(this.client.removeMetadata(handle, security));
    }
    /**
     * Used for viewing files via Filestack handles or storage aliases
     * @param {?} handle - Filestack handle
     * @param {?=} options - Preview options
     * @return {?}
     */
    preview(handle, options) {
        return this.client.preview(handle, options);
    }
    /**
     * Clear all current cloud sessions in the picker or
     * particular one if name is passed
     * @param {?=} name - Optional cloud name to be passed
     * @return {?}
     */
    logout(name) {
        return from(this.client.logout(name));
    }
}
FilestackService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ FilestackService.ngInjectableDef = ɵɵdefineInjectable({ factory: function FilestackService_Factory() { return new FilestackService(); }, token: FilestackService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
class PickerBaseComponent {
    /**
     * @param {?} filestackService
     */
    constructor(filestackService) {
        this.filestackService = filestackService;
        this.uploadSuccess = new Subject();
        this.uploadError = new Subject();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        const { apikey, clientOptions, filestackService } = this;
        filestackService.init(apikey, clientOptions);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        const { picker } = this;
        if (picker) {
            picker.close();
        }
    }
}
/** @nocollapse */
PickerBaseComponent.ctorParameters = () => [
    { type: FilestackService, decorators: [{ type: Inject, args: [FilestackService,] }] }
];
PickerBaseComponent.propDecorators = {
    apikey: [{ type: Input }],
    pickerOptions: [{ type: Input }],
    clientOptions: [{ type: Input }],
    file: [{ type: Input }],
    source: [{ type: Input }],
    uploadSuccess: [{ type: Output }],
    uploadError: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PickerOverlayComponent extends PickerBaseComponent {
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        const { filestackService, uploadSuccess, pickerOptions } = this;
        // Overwrite display mode to be always 'overlay' in this component
        this.picker = filestackService.picker(Object.assign({}, pickerOptions, { displayMode: PickerDisplayMode.overlay, onUploadDone: (/**
             * @param {?} res
             * @return {?}
             */
            res => uploadSuccess.next(res)) }));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        const { picker, customRenderRef, uploadError } = this;
        if (!customRenderRef.nativeElement.children.length) {
            // Picker open success handler there is ommited, because it's accessible from pickerOptions
            picker.open()
                .then(void (0))
                .catch((/**
             * @param {?} err
             * @return {?}
             */
            err => uploadError.next(err)));
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        const { picker, uploadError } = this;
        event.stopPropagation();
        event.preventDefault();
        // Picker open success handler there is ommited, because it's accessible from pickerOptions
        picker.open()
            .then(void (0))
            .catch((/**
         * @param {?} err
         * @return {?}
         */
        err => uploadError.next(err)));
    }
}
PickerOverlayComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-picker-overlay',
                template: '<div #customRender><ng-content class="ng-picker"></ng-content></div>',
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
PickerOverlayComponent.propDecorators = {
    customRenderRef: [{ type: ViewChild, args: ['customRender', { static: false },] }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PickerDropPaneComponent extends PickerBaseComponent {
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        const { filestackService, uploadSuccess, uploadError, pickerOptions } = this;
        // Overwrite display mode to be always 'dropPane' in this component
        this.picker = filestackService.picker(Object.assign({}, pickerOptions, { displayMode: PickerDisplayMode.dropPane, container: 'ng-picker-drop-pane-container', onUploadDone: (/**
             * @param {?} res
             * @return {?}
             */
            res => uploadSuccess.next(res)) }));
        // Picker open success handler there is ommited, because it's accessible from pickerOptions
        this.picker.open()
            .then(void (0))
            .catch((/**
         * @param {?} err
         * @return {?}
         */
        err => uploadError.next(err)));
    }
}
PickerDropPaneComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-picker-drop-pane',
                template: '<div id="ng-picker-drop-pane-container" class="ng-picker"></div>',
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PickerInlineComponent extends PickerBaseComponent {
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        const { filestackService, uploadSuccess, uploadError, pickerOptions } = this;
        // Overwrite display mode to be always 'inline' in this component
        this.picker = filestackService.picker(Object.assign({}, pickerOptions, { displayMode: PickerDisplayMode.inline, container: 'ng-picker-inline-container', onUploadDone: (/**
             * @param {?} res
             * @return {?}
             */
            res => uploadSuccess.next(res)) }));
        // Picker open success handler there is ommited, because it's accessible from pickerOptions
        this.picker.open()
            .then(void (0))
            .catch((/**
         * @param {?} err
         * @return {?}
         */
        err => uploadError.next(err)));
    }
}
PickerInlineComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-picker-inline',
                template: '<div id="ng-picker-inline-container" class="ng-picker"></div>',
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FilestackTransformPipe {
    /**
     * @param {?} filestackService
     */
    constructor(filestackService) {
        this.filestackService = filestackService;
    }
    /**
     * @param {?} value
     * @param {?=} transformOptions
     * @return {?}
     */
    transform(value, transformOptions) {
        return this.filestackService.transform(value, transformOptions);
    }
}
FilestackTransformPipe.decorators = [
    { type: Pipe, args: [{ name: 'filestackTransform' },] }
];
/** @nocollapse */
FilestackTransformPipe.ctorParameters = () => [
    { type: FilestackService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FilestackModule {
}
FilestackModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                ],
                providers: [
                    FilestackService
                ],
                declarations: [
                    PickerOverlayComponent,
                    PickerInlineComponent,
                    PickerDropPaneComponent,
                    FilestackTransformPipe
                ],
                exports: [
                    PickerOverlayComponent,
                    PickerInlineComponent,
                    PickerDropPaneComponent,
                    FilestackTransformPipe
                ]
            },] }
];

export { FilestackModule, FilestackService, FilestackTransformPipe, PickerDropPaneComponent, PickerInlineComponent, PickerOverlayComponent, PickerBaseComponent as ɵa };
//# sourceMappingURL=filestack-angular.js.map
