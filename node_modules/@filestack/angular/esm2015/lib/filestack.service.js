/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { from } from 'rxjs';
import { init } from 'filestack-js';
import * as i0 from "@angular/core";
export class FilestackService {
    /**
     * @private
     * @return {?}
     */
    get client() {
        if (!this.clientInstance) {
            throw new Error('FilestackService: client does not exist. Please initialize service via init method.');
        }
        return this.clientInstance;
    }
    /**
     * @private
     * @param {?} client
     * @return {?}
     */
    set client(client) {
        this.clientInstance = client;
    }
    /**
     * Set another client instance as this one used by FilestackService
     * @param {?} client - An instance of filestack client class
     * @return {?}
     */
    setClientInstance(client) {
        if (client) {
            this.client = client;
        }
    }
    /**
     * Initialize filestack client
     * @param {?} apikey - Filestack apikey
     * @param {?=} clientOptions - Client options
     * @return {?}
     */
    init(apikey, clientOptions) {
        this.client = init(apikey, clientOptions);
    }
    /**
     * Instance of picker class
     * @param {?=} options - picker options
     * @return {?}
     */
    picker(options) {
        return this.client.picker(options);
    }
    /**
     * Generate url with filestack transformations
     * @param {?} url - Filestack handle or external url
     * @param {?} options - Transformation options
     * @param {?=} b64 - Encode url params in base64
     * @return {?}
     */
    transform(url, options, b64) {
        return this.client.transform(url, options, b64);
    }
    /**
     * Access files via their Filestack handles
     * @param {?} handle - Filestack handle
     * @param {?=} options - Retrieve options
     * @param {?=} security - Filestack security object
     * @return {?}
     */
    retrieve(handle, options, security) {
        return from(this.client.retrieve(handle, options, security));
    }
    /**
     * Retrieve detailed data of stored files
     * @param {?} handle - Filestack handle
     * @param {?=} options - Metadata options
     * @param {?=} security - Filestack security object
     * @return {?}
     */
    metadata(handle, options, security) {
        return from(this.client.metadata(handle, options, security));
    }
    /**
     * Store a file from its URL
     * @param {?} url - Valid url to file
     * @param {?=} options - Store params
     * @param {?=} token - Optional control token to call .cancel()
     * @param {?=} security - Filestack security object
     * @return {?}
     */
    storeURL(url, options, token, security) {
        return from(this.client.storeURL(url, options, token, security));
    }
    /**
     * Upload a provided file
     * @param {?} file - A file to upload
     * @param {?=} options - Upload options
     * @param {?=} storeOptions - Store options
     * @param {?=} token - Optional control token to call .cancel()
     * @param {?=} security - Filestack security object
     * @return {?}
     */
    upload(file, options, storeOptions, token, security) {
        return from(this.client.upload(file, options, storeOptions, token, security));
    }
    /**
     * Remove a file from storage and the Filestack system
     * @param {?} handle - Filestack handle
     * @param {?} security - Filestack security object
     * @return {?}
     */
    remove(handle, security) {
        return from(this.client.remove(handle, security));
    }
    /**
     * Remove a file only from the Filestack system. The file remains in storage
     * @param {?} handle - Filestack handle
     * @param {?} security - Filestack security object
     * @return {?}
     */
    removeMetadata(handle, security) {
        return from(this.client.removeMetadata(handle, security));
    }
    /**
     * Used for viewing files via Filestack handles or storage aliases
     * @param {?} handle - Filestack handle
     * @param {?=} options - Preview options
     * @return {?}
     */
    preview(handle, options) {
        return this.client.preview(handle, options);
    }
    /**
     * Clear all current cloud sessions in the picker or
     * particular one if name is passed
     * @param {?=} name - Optional cloud name to be passed
     * @return {?}
     */
    logout(name) {
        return from(this.client.logout(name));
    }
}
FilestackService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ FilestackService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function FilestackService_Factory() { return new FilestackService(); }, token: FilestackService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    FilestackService.prototype.clientInstance;
}
//# sourceMappingURL=data:application/json;base64,