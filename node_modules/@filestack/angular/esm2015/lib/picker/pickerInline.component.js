/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ChangeDetectionStrategy } from '@angular/core';
import { PickerBaseComponent } from './pickerBase.component';
import { PickerDisplayMode } from 'filestack-js';
export class PickerInlineComponent extends PickerBaseComponent {
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        const { filestackService, uploadSuccess, uploadError, pickerOptions } = this;
        // Overwrite display mode to be always 'inline' in this component
        this.picker = filestackService.picker(Object.assign({}, pickerOptions, { displayMode: PickerDisplayMode.inline, container: 'ng-picker-inline-container', onUploadDone: (/**
             * @param {?} res
             * @return {?}
             */
            res => uploadSuccess.next(res)) }));
        // Picker open success handler there is ommited, because it's accessible from pickerOptions
        this.picker.open()
            .then(void (0))
            .catch((/**
         * @param {?} err
         * @return {?}
         */
        err => uploadError.next(err)));
    }
}
PickerInlineComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-picker-inline',
                template: '<div id="ng-picker-inline-container" class="ng-picker"></div>',
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlja2VySW5saW5lLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmaWxlc3RhY2svYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9waWNrZXIvcGlja2VySW5saW5lLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNILFNBQVMsRUFDVCx1QkFBdUIsRUFFMUIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBTWpELE1BQU0sT0FBTyxxQkFBc0IsU0FBUSxtQkFBbUI7Ozs7SUFDMUQsa0JBQWtCO2NBQ1YsRUFBRSxnQkFBZ0IsRUFBRSxhQUFhLEVBQUUsV0FBVyxFQUFFLGFBQWEsRUFBRSxHQUFHLElBQUk7UUFFNUUsaUVBQWlFO1FBQ2pFLElBQUksQ0FBQyxNQUFNLEdBQUcsZ0JBQWdCLENBQUMsTUFBTSxtQkFDaEMsYUFBYSxJQUNoQixXQUFXLEVBQUUsaUJBQWlCLENBQUMsTUFBTSxFQUNyQyxTQUFTLEVBQUUsNEJBQTRCLEVBQ3ZDLFlBQVk7Ozs7WUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQzVDLENBQUM7UUFFSCwyRkFBMkY7UUFDM0YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUU7YUFDZixJQUFJLENBQUMsS0FBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ2IsS0FBSzs7OztRQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBQyxDQUFDO0lBQ3pDLENBQUM7OztZQXJCSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGtCQUFrQjtnQkFDNUIsUUFBUSxFQUFFLCtEQUErRDtnQkFDekUsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07YUFDbEQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENvbXBvbmVudCxcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgICBBZnRlckNvbnRlbnRJbml0XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGlja2VyQmFzZUNvbXBvbmVudCB9IGZyb20gJy4vcGlja2VyQmFzZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgUGlja2VyRGlzcGxheU1vZGUgfSBmcm9tICdmaWxlc3RhY2stanMnO1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICduZy1waWNrZXItaW5saW5lJyxcbiAgICB0ZW1wbGF0ZTogJzxkaXYgaWQ9XCJuZy1waWNrZXItaW5saW5lLWNvbnRhaW5lclwiIGNsYXNzPVwibmctcGlja2VyXCI+PC9kaXY+JyxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBQaWNrZXJJbmxpbmVDb21wb25lbnQgZXh0ZW5kcyBQaWNrZXJCYXNlQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCB7XG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgICAgY29uc3QgeyBmaWxlc3RhY2tTZXJ2aWNlLCB1cGxvYWRTdWNjZXNzLCB1cGxvYWRFcnJvciwgcGlja2VyT3B0aW9ucyB9ID0gdGhpcztcblxuICAgICAgLy8gT3ZlcndyaXRlIGRpc3BsYXkgbW9kZSB0byBiZSBhbHdheXMgJ2lubGluZScgaW4gdGhpcyBjb21wb25lbnRcbiAgICAgIHRoaXMucGlja2VyID0gZmlsZXN0YWNrU2VydmljZS5waWNrZXIoe1xuICAgICAgICAuLi5waWNrZXJPcHRpb25zLFxuICAgICAgICBkaXNwbGF5TW9kZTogUGlja2VyRGlzcGxheU1vZGUuaW5saW5lLFxuICAgICAgICBjb250YWluZXI6ICduZy1waWNrZXItaW5saW5lLWNvbnRhaW5lcicsXG4gICAgICAgIG9uVXBsb2FkRG9uZTogcmVzID0+IHVwbG9hZFN1Y2Nlc3MubmV4dChyZXMpXG4gICAgICB9KTtcblxuICAgICAgLy8gUGlja2VyIG9wZW4gc3VjY2VzcyBoYW5kbGVyIHRoZXJlIGlzIG9tbWl0ZWQsIGJlY2F1c2UgaXQncyBhY2Nlc3NpYmxlIGZyb20gcGlja2VyT3B0aW9uc1xuICAgICAgdGhpcy5waWNrZXIub3BlbigpXG4gICAgICAgIC50aGVuKHZvaWQoMCkpXG4gICAgICAgIC5jYXRjaChlcnIgPT4gdXBsb2FkRXJyb3IubmV4dChlcnIpKTtcbiAgICB9XG59XG4iXX0=