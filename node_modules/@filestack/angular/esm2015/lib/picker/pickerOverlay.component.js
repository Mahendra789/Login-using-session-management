/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ChangeDetectionStrategy, HostListener, ViewChild, ElementRef } from '@angular/core';
import { PickerBaseComponent } from './pickerBase.component';
import { PickerDisplayMode } from 'filestack-js';
export class PickerOverlayComponent extends PickerBaseComponent {
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        const { filestackService, uploadSuccess, pickerOptions } = this;
        // Overwrite display mode to be always 'overlay' in this component
        this.picker = filestackService.picker(Object.assign({}, pickerOptions, { displayMode: PickerDisplayMode.overlay, onUploadDone: (/**
             * @param {?} res
             * @return {?}
             */
            res => uploadSuccess.next(res)) }));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        const { picker, customRenderRef, uploadError } = this;
        if (!customRenderRef.nativeElement.children.length) {
            // Picker open success handler there is ommited, because it's accessible from pickerOptions
            picker.open()
                .then(void (0))
                .catch((/**
             * @param {?} err
             * @return {?}
             */
            err => uploadError.next(err)));
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        const { picker, uploadError } = this;
        event.stopPropagation();
        event.preventDefault();
        // Picker open success handler there is ommited, because it's accessible from pickerOptions
        picker.open()
            .then(void (0))
            .catch((/**
         * @param {?} err
         * @return {?}
         */
        err => uploadError.next(err)));
    }
}
PickerOverlayComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-picker-overlay',
                template: '<div #customRender><ng-content class="ng-picker"></ng-content></div>',
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
PickerOverlayComponent.propDecorators = {
    customRenderRef: [{ type: ViewChild, args: ['customRender', { static: false },] }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    PickerOverlayComponent.prototype.customRenderRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlja2VyT3ZlcmxheS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmlsZXN0YWNrL2FuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvcGlja2VyL3BpY2tlck92ZXJsYXkuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0gsU0FBUyxFQUNULHVCQUF1QixFQUV2QixZQUFZLEVBQ1osU0FBUyxFQUNULFVBQVUsRUFFYixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM3RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFNakQsTUFBTSxPQUFPLHNCQUF1QixTQUFRLG1CQUFtQjs7OztJQUczRCxrQkFBa0I7Y0FDVixFQUFFLGdCQUFnQixFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQUUsR0FBRyxJQUFJO1FBRS9ELGtFQUFrRTtRQUNsRSxJQUFJLENBQUMsTUFBTSxHQUFHLGdCQUFnQixDQUFDLE1BQU0sbUJBQ2hDLGFBQWEsSUFDaEIsV0FBVyxFQUFFLGlCQUFpQixDQUFDLE9BQU8sRUFDdEMsWUFBWTs7OztZQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FDNUMsQ0FBQztJQUNMLENBQUM7Ozs7SUFFRCxlQUFlO2NBQ1AsRUFBQyxNQUFNLEVBQUUsZUFBZSxFQUFFLFdBQVcsRUFBQyxHQUFHLElBQUk7UUFDbkQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRTtZQUNsRCwyRkFBMkY7WUFDM0YsTUFBTSxDQUFDLElBQUksRUFBRTtpQkFDVixJQUFJLENBQUMsS0FBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUNiLEtBQUs7Ozs7WUFBQyxHQUFHLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUMsQ0FBQztTQUN4QztJQUNILENBQUM7Ozs7O0lBR0QsT0FBTyxDQUFDLEtBQUs7Y0FDTCxFQUFDLE1BQU0sRUFBRSxXQUFXLEVBQUMsR0FBRyxJQUFJO1FBQ2xDLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN4QixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDdkIsMkZBQTJGO1FBQzNGLE1BQU0sQ0FBQyxJQUFJLEVBQUU7YUFDVixJQUFJLENBQUMsS0FBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ2IsS0FBSzs7OztRQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBQyxDQUFDO0lBQ3pDLENBQUM7OztZQXRDSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLG1CQUFtQjtnQkFDN0IsUUFBUSxFQUFFLHNFQUFzRTtnQkFDaEYsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07YUFDbEQ7Ozs4QkFFSSxTQUFTLFNBQUMsY0FBYyxFQUFFLEVBQUMsTUFBTSxFQUFFLEtBQUssRUFBQztzQkF1QnpDLFlBQVksU0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUM7Ozs7SUF2QmpDLGlEQUF3RSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ29tcG9uZW50LFxuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIEFmdGVyVmlld0luaXQsXG4gICAgSG9zdExpc3RlbmVyLFxuICAgIFZpZXdDaGlsZCxcbiAgICBFbGVtZW50UmVmLFxuICAgIEFmdGVyQ29udGVudEluaXRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQaWNrZXJCYXNlQ29tcG9uZW50IH0gZnJvbSAnLi9waWNrZXJCYXNlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQaWNrZXJEaXNwbGF5TW9kZSB9IGZyb20gJ2ZpbGVzdGFjay1qcyc7XG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ25nLXBpY2tlci1vdmVybGF5JyxcbiAgICB0ZW1wbGF0ZTogJzxkaXYgI2N1c3RvbVJlbmRlcj48bmctY29udGVudCBjbGFzcz1cIm5nLXBpY2tlclwiPjwvbmctY29udGVudD48L2Rpdj4nLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIFBpY2tlck92ZXJsYXlDb21wb25lbnQgZXh0ZW5kcyBQaWNrZXJCYXNlQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCwgQWZ0ZXJWaWV3SW5pdCB7XG4gICAgQFZpZXdDaGlsZCgnY3VzdG9tUmVuZGVyJywge3N0YXRpYzogZmFsc2V9KSBjdXN0b21SZW5kZXJSZWY6IEVsZW1lbnRSZWY7XG5cbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgICBjb25zdCB7IGZpbGVzdGFja1NlcnZpY2UsIHVwbG9hZFN1Y2Nlc3MsIHBpY2tlck9wdGlvbnMgfSA9IHRoaXM7XG5cbiAgICAgIC8vIE92ZXJ3cml0ZSBkaXNwbGF5IG1vZGUgdG8gYmUgYWx3YXlzICdvdmVybGF5JyBpbiB0aGlzIGNvbXBvbmVudFxuICAgICAgdGhpcy5waWNrZXIgPSBmaWxlc3RhY2tTZXJ2aWNlLnBpY2tlcih7XG4gICAgICAgIC4uLnBpY2tlck9wdGlvbnMsXG4gICAgICAgIGRpc3BsYXlNb2RlOiBQaWNrZXJEaXNwbGF5TW9kZS5vdmVybGF5LFxuICAgICAgICBvblVwbG9hZERvbmU6IHJlcyA9PiB1cGxvYWRTdWNjZXNzLm5leHQocmVzKVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgICAgY29uc3Qge3BpY2tlciwgY3VzdG9tUmVuZGVyUmVmLCB1cGxvYWRFcnJvcn0gPSB0aGlzO1xuICAgICAgaWYgKCFjdXN0b21SZW5kZXJSZWYubmF0aXZlRWxlbWVudC5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgLy8gUGlja2VyIG9wZW4gc3VjY2VzcyBoYW5kbGVyIHRoZXJlIGlzIG9tbWl0ZWQsIGJlY2F1c2UgaXQncyBhY2Nlc3NpYmxlIGZyb20gcGlja2VyT3B0aW9uc1xuICAgICAgICBwaWNrZXIub3BlbigpXG4gICAgICAgICAgLnRoZW4odm9pZCgwKSlcbiAgICAgICAgICAuY2F0Y2goZXJyID0+IHVwbG9hZEVycm9yLm5leHQoZXJyKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudCddKVxuICAgIG9uQ2xpY2soZXZlbnQpIHtcbiAgICAgIGNvbnN0IHtwaWNrZXIsIHVwbG9hZEVycm9yfSA9IHRoaXM7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAvLyBQaWNrZXIgb3BlbiBzdWNjZXNzIGhhbmRsZXIgdGhlcmUgaXMgb21taXRlZCwgYmVjYXVzZSBpdCdzIGFjY2Vzc2libGUgZnJvbSBwaWNrZXJPcHRpb25zXG4gICAgICBwaWNrZXIub3BlbigpXG4gICAgICAgIC50aGVuKHZvaWQoMCkpXG4gICAgICAgIC5jYXRjaChlcnIgPT4gdXBsb2FkRXJyb3IubmV4dChlcnIpKTtcbiAgICB9XG59XG4iXX0=