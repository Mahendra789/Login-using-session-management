/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ChangeDetectionStrategy } from '@angular/core';
import { PickerBaseComponent } from './pickerBase.component';
import { PickerDisplayMode } from 'filestack-js';
export class PickerDropPaneComponent extends PickerBaseComponent {
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        const { filestackService, uploadSuccess, uploadError, pickerOptions } = this;
        // Overwrite display mode to be always 'dropPane' in this component
        this.picker = filestackService.picker(Object.assign({}, pickerOptions, { displayMode: PickerDisplayMode.dropPane, container: 'ng-picker-drop-pane-container', onUploadDone: (/**
             * @param {?} res
             * @return {?}
             */
            res => uploadSuccess.next(res)) }));
        // Picker open success handler there is ommited, because it's accessible from pickerOptions
        this.picker.open()
            .then(void (0))
            .catch((/**
         * @param {?} err
         * @return {?}
         */
        err => uploadError.next(err)));
    }
}
PickerDropPaneComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-picker-drop-pane',
                template: '<div id="ng-picker-drop-pane-container" class="ng-picker"></div>',
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlja2VyRHJvcFBhbmUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZpbGVzdGFjay9hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL3BpY2tlci9waWNrZXJEcm9wUGFuZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDSCxTQUFTLEVBQ1QsdUJBQXVCLEVBRTFCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzdELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQU1qRCxNQUFNLE9BQU8sdUJBQXdCLFNBQVEsbUJBQW1COzs7O0lBQzVELGtCQUFrQjtjQUNWLEVBQUUsZ0JBQWdCLEVBQUUsYUFBYSxFQUFFLFdBQVcsRUFBRSxhQUFhLEVBQUUsR0FBRyxJQUFJO1FBRTVFLG1FQUFtRTtRQUNuRSxJQUFJLENBQUMsTUFBTSxHQUFHLGdCQUFnQixDQUFDLE1BQU0sbUJBQ2hDLGFBQWEsSUFDaEIsV0FBVyxFQUFFLGlCQUFpQixDQUFDLFFBQVEsRUFDdkMsU0FBUyxFQUFFLCtCQUErQixFQUMxQyxZQUFZOzs7O1lBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUM1QyxDQUFDO1FBRUgsMkZBQTJGO1FBQzNGLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFO2FBQ2YsSUFBSSxDQUFDLEtBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNiLEtBQUs7Ozs7UUFBQyxHQUFHLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUMsQ0FBQztJQUN6QyxDQUFDOzs7WUFyQkosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxxQkFBcUI7Z0JBQy9CLFFBQVEsRUFBRSxrRUFBa0U7Z0JBQzVFLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2FBQ2xEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDb21wb25lbnQsXG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgQWZ0ZXJDb250ZW50SW5pdFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBpY2tlckJhc2VDb21wb25lbnQgfSBmcm9tICcuL3BpY2tlckJhc2UuY29tcG9uZW50JztcbmltcG9ydCB7IFBpY2tlckRpc3BsYXlNb2RlIH0gZnJvbSAnZmlsZXN0YWNrLWpzJztcbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnbmctcGlja2VyLWRyb3AtcGFuZScsXG4gICAgdGVtcGxhdGU6ICc8ZGl2IGlkPVwibmctcGlja2VyLWRyb3AtcGFuZS1jb250YWluZXJcIiBjbGFzcz1cIm5nLXBpY2tlclwiPjwvZGl2PicsXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgUGlja2VyRHJvcFBhbmVDb21wb25lbnQgZXh0ZW5kcyBQaWNrZXJCYXNlQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCB7XG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgICAgY29uc3QgeyBmaWxlc3RhY2tTZXJ2aWNlLCB1cGxvYWRTdWNjZXNzLCB1cGxvYWRFcnJvciwgcGlja2VyT3B0aW9ucyB9ID0gdGhpcztcblxuICAgICAgLy8gT3ZlcndyaXRlIGRpc3BsYXkgbW9kZSB0byBiZSBhbHdheXMgJ2Ryb3BQYW5lJyBpbiB0aGlzIGNvbXBvbmVudFxuICAgICAgdGhpcy5waWNrZXIgPSBmaWxlc3RhY2tTZXJ2aWNlLnBpY2tlcih7XG4gICAgICAgIC4uLnBpY2tlck9wdGlvbnMsXG4gICAgICAgIGRpc3BsYXlNb2RlOiBQaWNrZXJEaXNwbGF5TW9kZS5kcm9wUGFuZSxcbiAgICAgICAgY29udGFpbmVyOiAnbmctcGlja2VyLWRyb3AtcGFuZS1jb250YWluZXInLFxuICAgICAgICBvblVwbG9hZERvbmU6IHJlcyA9PiB1cGxvYWRTdWNjZXNzLm5leHQocmVzKVxuICAgICAgfSk7XG5cbiAgICAgIC8vIFBpY2tlciBvcGVuIHN1Y2Nlc3MgaGFuZGxlciB0aGVyZSBpcyBvbW1pdGVkLCBiZWNhdXNlIGl0J3MgYWNjZXNzaWJsZSBmcm9tIHBpY2tlck9wdGlvbnNcbiAgICAgIHRoaXMucGlja2VyLm9wZW4oKVxuICAgICAgICAudGhlbih2b2lkKDApKVxuICAgICAgICAuY2F0Y2goZXJyID0+IHVwbG9hZEVycm9yLm5leHQoZXJyKSk7XG4gICAgfVxufVxuIl19