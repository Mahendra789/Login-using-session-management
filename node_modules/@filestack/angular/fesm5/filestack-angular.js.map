{"version":3,"file":"filestack-angular.js","sources":["ng://@filestack/angular/lib/filestack.service.ts","ng://@filestack/angular/lib/picker/pickerBase.component.ts","ng://@filestack/angular/lib/picker/pickerOverlay.component.ts","ng://@filestack/angular/lib/picker/pickerDropPane.component.ts","ng://@filestack/angular/lib/picker/pickerInline.component.ts","ng://@filestack/angular/lib/filestack-transform.pipe.ts","ng://@filestack/angular/lib/filestack.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  from,\n  Observable\n} from 'rxjs';\nimport {\n  PickerOptions,\n  PickerInstance,\n  StoreParams,\n  TransformOptions,\n  InputFile,\n  RetrieveOptions,\n  MetadataOptions,\n  Security,\n  UploadOptions,\n  StoreUploadOptions,\n  PreviewOptions,\n  ClientOptions,\n  Client,\n  init\n } from 'filestack-js';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class FilestackService {\n  private clientInstance: Client;\n\n  private get client(): Client {\n    if (!this.clientInstance) {\n      throw new Error('FilestackService: client does not exist. Please initialize service via init method.');\n    }\n    return this.clientInstance;\n  }\n\n  private set client(client: Client) {\n    this.clientInstance = client;\n  }\n\n  /**\n   * Set another client instance as this one used by FilestackService\n   * @param client - An instance of filestack client class\n   */\n  setClientInstance(client: Client) {\n    if (client) {\n      this.client = client;\n    }\n  }\n\n  /**\n   * Initialize filestack client\n   * @param apikey - Filestack apikey\n   * @param clientOptions - Client options\n   */\n  init(apikey: string, clientOptions?: ClientOptions): void {\n    this.client = init(apikey, clientOptions);\n  }\n\n  /**\n   * Instance of picker class\n   * @param options - picker options\n   */\n  picker(options?: PickerOptions): PickerInstance {\n    return this.client.picker(options);\n  }\n\n  /**\n   * Generate url with filestack transformations\n   * @param url - Filestack handle or external url\n   * @param options - Transformation options\n   * @param b64 - Encode url params in base64\n   */\n  transform(url: string | string[], options: TransformOptions, b64?: boolean): string {\n    return this.client.transform(url, options, b64);\n  }\n\n  /**\n   * Access files via their Filestack handles\n   * @param handle - Filestack handle\n   * @param options - Retrieve options\n   * @param security - Filestack security object\n   */\n  retrieve(handle: string, options?: RetrieveOptions, security?: Security): Observable<object | Blob> {\n    return from(this.client.retrieve(handle, options, security));\n  }\n\n  /**\n   * Retrieve detailed data of stored files\n   * @param handle - Filestack handle\n   * @param options - Metadata options\n   * @param security - Filestack security object\n   */\n  metadata(handle: string, options?: MetadataOptions, security?: Security): Observable<object> {\n    return from(this.client.metadata(handle, options, security));\n  }\n\n  /**\n   * Store a file from its URL\n   * @param url - Valid url to file\n   * @param options - Store params\n   * @param token - Optional control token to call .cancel()\n   * @param security - Filestack security object\n   */\n  storeURL(url: string, options?: StoreParams, token?: string, security?: Security): Observable<object> {\n    return from(this.client.storeURL(url, options, token, security));\n  }\n\n  /**\n   * Upload a provided file\n   * @param file - A file to upload\n   * @param options - Upload options\n   * @param storeOptions - Store options\n   * @param token - Optional control token to call .cancel()\n   * @param security - Filestack security object\n   */\n  upload(\n    file: InputFile,\n    options?: UploadOptions,\n    storeOptions?: StoreUploadOptions,\n    token?: string, security?: Security\n  ): Observable<object> {\n    return from(this.client.upload(file, options, storeOptions, token, security));\n  }\n\n  /**\n   * Remove a file from storage and the Filestack system\n   * @param handle - Filestack handle\n   * @param security - Filestack security object\n   */\n  remove(handle: string, security: Security): Observable<object> {\n    return from(this.client.remove(handle, security));\n  }\n\n  /**\n   * Remove a file only from the Filestack system. The file remains in storage\n   * @param handle - Filestack handle\n   * @param security - Filestack security object\n   */\n  removeMetadata(handle: string, security: Security): Observable<object> {\n    return from(this.client.removeMetadata(handle, security));\n  }\n\n  /**\n   * Used for viewing files via Filestack handles or storage aliases\n   * @param handle - Filestack handle\n   * @param options - Preview options\n   */\n  preview(handle: string, options?: PreviewOptions): HTMLIFrameElement | Window {\n    return this.client.preview(handle, options);\n  }\n\n  /**\n   * Clear all current cloud sessions in the picker or\n   * particular one if name is passed\n   * @param name - Optional cloud name to be passed\n   */\n  logout(name?: string): Observable<object> {\n    return from(this.client.logout(name));\n  }\n}\n","import {\n  Input,\n  Output,\n  OnInit,\n  Inject,\n  OnDestroy\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { FilestackService } from '../filestack.service';\nimport {\n  PickerInstance,\n  PickerOptions,\n  ClientOptions,\n  InputFile,\n  PickerResponse,\n  FilestackError\n} from 'filestack-js';\n\nexport abstract class PickerBaseComponent implements OnInit, OnDestroy {\n  @Input() apikey: string;\n  @Input() pickerOptions: PickerOptions;\n  @Input() clientOptions: ClientOptions;\n  @Input() file: InputFile;\n  @Input() source: string;\n\n  @Output() uploadSuccess: Subject<PickerResponse>;\n  @Output() uploadError: Subject<FilestackError>;\n\n  picker: PickerInstance;\n\n  constructor(@Inject(FilestackService) protected filestackService: FilestackService) {\n    this.uploadSuccess = new Subject();\n    this.uploadError = new Subject();\n  }\n\n  ngOnInit() {\n    const {apikey, clientOptions, filestackService} = this;\n    filestackService.init(apikey, clientOptions);\n  }\n\n  ngOnDestroy() {\n    const {picker} = this;\n    if (picker) {\n      picker.close();\n    }\n  }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    AfterViewInit,\n    HostListener,\n    ViewChild,\n    ElementRef,\n    AfterContentInit\n} from '@angular/core';\nimport { PickerBaseComponent } from './pickerBase.component';\nimport { PickerDisplayMode } from 'filestack-js';\n@Component({\n    selector: 'ng-picker-overlay',\n    template: '<div #customRender><ng-content class=\"ng-picker\"></ng-content></div>',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PickerOverlayComponent extends PickerBaseComponent implements AfterContentInit, AfterViewInit {\n    @ViewChild('customRender', {static: false}) customRenderRef: ElementRef;\n\n    ngAfterContentInit() {\n      const { filestackService, uploadSuccess, pickerOptions } = this;\n\n      // Overwrite display mode to be always 'overlay' in this component\n      this.picker = filestackService.picker({\n        ...pickerOptions,\n        displayMode: PickerDisplayMode.overlay,\n        onUploadDone: res => uploadSuccess.next(res)\n      });\n    }\n\n    ngAfterViewInit() {\n      const {picker, customRenderRef, uploadError} = this;\n      if (!customRenderRef.nativeElement.children.length) {\n        // Picker open success handler there is ommited, because it's accessible from pickerOptions\n        picker.open()\n          .then(void(0))\n          .catch(err => uploadError.next(err));\n      }\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event) {\n      const {picker, uploadError} = this;\n      event.stopPropagation();\n      event.preventDefault();\n      // Picker open success handler there is ommited, because it's accessible from pickerOptions\n      picker.open()\n        .then(void(0))\n        .catch(err => uploadError.next(err));\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    AfterContentInit\n} from '@angular/core';\nimport { PickerBaseComponent } from './pickerBase.component';\nimport { PickerDisplayMode } from 'filestack-js';\n@Component({\n    selector: 'ng-picker-drop-pane',\n    template: '<div id=\"ng-picker-drop-pane-container\" class=\"ng-picker\"></div>',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PickerDropPaneComponent extends PickerBaseComponent implements AfterContentInit {\n    ngAfterContentInit() {\n      const { filestackService, uploadSuccess, uploadError, pickerOptions } = this;\n\n      // Overwrite display mode to be always 'dropPane' in this component\n      this.picker = filestackService.picker({\n        ...pickerOptions,\n        displayMode: PickerDisplayMode.dropPane,\n        container: 'ng-picker-drop-pane-container',\n        onUploadDone: res => uploadSuccess.next(res)\n      });\n\n      // Picker open success handler there is ommited, because it's accessible from pickerOptions\n      this.picker.open()\n        .then(void(0))\n        .catch(err => uploadError.next(err));\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    AfterContentInit\n} from '@angular/core';\nimport { PickerBaseComponent } from './pickerBase.component';\nimport { PickerDisplayMode } from 'filestack-js';\n@Component({\n    selector: 'ng-picker-inline',\n    template: '<div id=\"ng-picker-inline-container\" class=\"ng-picker\"></div>',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PickerInlineComponent extends PickerBaseComponent implements AfterContentInit {\n    ngAfterContentInit() {\n      const { filestackService, uploadSuccess, uploadError, pickerOptions } = this;\n\n      // Overwrite display mode to be always 'inline' in this component\n      this.picker = filestackService.picker({\n        ...pickerOptions,\n        displayMode: PickerDisplayMode.inline,\n        container: 'ng-picker-inline-container',\n        onUploadDone: res => uploadSuccess.next(res)\n      });\n\n      // Picker open success handler there is ommited, because it's accessible from pickerOptions\n      this.picker.open()\n        .then(void(0))\n        .catch(err => uploadError.next(err));\n    }\n}\n","import {\n  Pipe,\n  PipeTransform\n} from '@angular/core';\nimport { FilestackService } from './filestack.service';\nimport { TransformOptions } from 'filestack-js';\n\n@Pipe({name: 'filestackTransform'})\nexport class FilestackTransformPipe implements PipeTransform {\n  constructor(private filestackService: FilestackService) {}\n  transform(value: string, transformOptions?: TransformOptions): string {\n    return this.filestackService.transform(value, transformOptions);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FilestackService } from './filestack.service';\nimport { FilestackTransformPipe } from './filestack-transform.pipe';\nimport { PickerOverlayComponent } from './picker/pickerOverlay.component';\nimport { PickerInlineComponent } from './picker/pickerInline.component';\nimport { PickerDropPaneComponent } from './picker/pickerDropPane.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  providers: [\n    FilestackService\n  ],\n  declarations: [\n    PickerOverlayComponent,\n    PickerInlineComponent,\n    PickerDropPaneComponent,\n    FilestackTransformPipe\n  ],\n  exports: [\n    PickerOverlayComponent,\n    PickerInlineComponent,\n    PickerDropPaneComponent,\n    FilestackTransformPipe\n  ]\n})\nexport class FilestackModule {}\n"],"names":["tslib_1.__extends"],"mappings":"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"}