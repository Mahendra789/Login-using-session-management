import { Injectable, ɵɵdefineInjectable, Inject, Input, Output, Component, ChangeDetectionStrategy, ViewChild, HostListener, Pipe, NgModule } from '@angular/core';
import { from, Subject } from 'rxjs';
import { init, PickerDisplayMode } from 'filestack-js';
import { __extends, __assign } from 'tslib';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FilestackService = /** @class */ (function () {
    function FilestackService() {
    }
    Object.defineProperty(FilestackService.prototype, "client", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            if (!this.clientInstance) {
                throw new Error('FilestackService: client does not exist. Please initialize service via init method.');
            }
            return this.clientInstance;
        },
        set: /**
         * @private
         * @param {?} client
         * @return {?}
         */
        function (client) {
            this.clientInstance = client;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Set another client instance as this one used by FilestackService
     * @param client - An instance of filestack client class
     */
    /**
     * Set another client instance as this one used by FilestackService
     * @param {?} client - An instance of filestack client class
     * @return {?}
     */
    FilestackService.prototype.setClientInstance = /**
     * Set another client instance as this one used by FilestackService
     * @param {?} client - An instance of filestack client class
     * @return {?}
     */
    function (client) {
        if (client) {
            this.client = client;
        }
    };
    /**
     * Initialize filestack client
     * @param apikey - Filestack apikey
     * @param clientOptions - Client options
     */
    /**
     * Initialize filestack client
     * @param {?} apikey - Filestack apikey
     * @param {?=} clientOptions - Client options
     * @return {?}
     */
    FilestackService.prototype.init = /**
     * Initialize filestack client
     * @param {?} apikey - Filestack apikey
     * @param {?=} clientOptions - Client options
     * @return {?}
     */
    function (apikey, clientOptions) {
        this.client = init(apikey, clientOptions);
    };
    /**
     * Instance of picker class
     * @param options - picker options
     */
    /**
     * Instance of picker class
     * @param {?=} options - picker options
     * @return {?}
     */
    FilestackService.prototype.picker = /**
     * Instance of picker class
     * @param {?=} options - picker options
     * @return {?}
     */
    function (options) {
        return this.client.picker(options);
    };
    /**
     * Generate url with filestack transformations
     * @param url - Filestack handle or external url
     * @param options - Transformation options
     * @param b64 - Encode url params in base64
     */
    /**
     * Generate url with filestack transformations
     * @param {?} url - Filestack handle or external url
     * @param {?} options - Transformation options
     * @param {?=} b64 - Encode url params in base64
     * @return {?}
     */
    FilestackService.prototype.transform = /**
     * Generate url with filestack transformations
     * @param {?} url - Filestack handle or external url
     * @param {?} options - Transformation options
     * @param {?=} b64 - Encode url params in base64
     * @return {?}
     */
    function (url, options, b64) {
        return this.client.transform(url, options, b64);
    };
    /**
     * Access files via their Filestack handles
     * @param handle - Filestack handle
     * @param options - Retrieve options
     * @param security - Filestack security object
     */
    /**
     * Access files via their Filestack handles
     * @param {?} handle - Filestack handle
     * @param {?=} options - Retrieve options
     * @param {?=} security - Filestack security object
     * @return {?}
     */
    FilestackService.prototype.retrieve = /**
     * Access files via their Filestack handles
     * @param {?} handle - Filestack handle
     * @param {?=} options - Retrieve options
     * @param {?=} security - Filestack security object
     * @return {?}
     */
    function (handle, options, security) {
        return from(this.client.retrieve(handle, options, security));
    };
    /**
     * Retrieve detailed data of stored files
     * @param handle - Filestack handle
     * @param options - Metadata options
     * @param security - Filestack security object
     */
    /**
     * Retrieve detailed data of stored files
     * @param {?} handle - Filestack handle
     * @param {?=} options - Metadata options
     * @param {?=} security - Filestack security object
     * @return {?}
     */
    FilestackService.prototype.metadata = /**
     * Retrieve detailed data of stored files
     * @param {?} handle - Filestack handle
     * @param {?=} options - Metadata options
     * @param {?=} security - Filestack security object
     * @return {?}
     */
    function (handle, options, security) {
        return from(this.client.metadata(handle, options, security));
    };
    /**
     * Store a file from its URL
     * @param url - Valid url to file
     * @param options - Store params
     * @param token - Optional control token to call .cancel()
     * @param security - Filestack security object
     */
    /**
     * Store a file from its URL
     * @param {?} url - Valid url to file
     * @param {?=} options - Store params
     * @param {?=} token - Optional control token to call .cancel()
     * @param {?=} security - Filestack security object
     * @return {?}
     */
    FilestackService.prototype.storeURL = /**
     * Store a file from its URL
     * @param {?} url - Valid url to file
     * @param {?=} options - Store params
     * @param {?=} token - Optional control token to call .cancel()
     * @param {?=} security - Filestack security object
     * @return {?}
     */
    function (url, options, token, security) {
        return from(this.client.storeURL(url, options, token, security));
    };
    /**
     * Upload a provided file
     * @param file - A file to upload
     * @param options - Upload options
     * @param storeOptions - Store options
     * @param token - Optional control token to call .cancel()
     * @param security - Filestack security object
     */
    /**
     * Upload a provided file
     * @param {?} file - A file to upload
     * @param {?=} options - Upload options
     * @param {?=} storeOptions - Store options
     * @param {?=} token - Optional control token to call .cancel()
     * @param {?=} security - Filestack security object
     * @return {?}
     */
    FilestackService.prototype.upload = /**
     * Upload a provided file
     * @param {?} file - A file to upload
     * @param {?=} options - Upload options
     * @param {?=} storeOptions - Store options
     * @param {?=} token - Optional control token to call .cancel()
     * @param {?=} security - Filestack security object
     * @return {?}
     */
    function (file, options, storeOptions, token, security) {
        return from(this.client.upload(file, options, storeOptions, token, security));
    };
    /**
     * Remove a file from storage and the Filestack system
     * @param handle - Filestack handle
     * @param security - Filestack security object
     */
    /**
     * Remove a file from storage and the Filestack system
     * @param {?} handle - Filestack handle
     * @param {?} security - Filestack security object
     * @return {?}
     */
    FilestackService.prototype.remove = /**
     * Remove a file from storage and the Filestack system
     * @param {?} handle - Filestack handle
     * @param {?} security - Filestack security object
     * @return {?}
     */
    function (handle, security) {
        return from(this.client.remove(handle, security));
    };
    /**
     * Remove a file only from the Filestack system. The file remains in storage
     * @param handle - Filestack handle
     * @param security - Filestack security object
     */
    /**
     * Remove a file only from the Filestack system. The file remains in storage
     * @param {?} handle - Filestack handle
     * @param {?} security - Filestack security object
     * @return {?}
     */
    FilestackService.prototype.removeMetadata = /**
     * Remove a file only from the Filestack system. The file remains in storage
     * @param {?} handle - Filestack handle
     * @param {?} security - Filestack security object
     * @return {?}
     */
    function (handle, security) {
        return from(this.client.removeMetadata(handle, security));
    };
    /**
     * Used for viewing files via Filestack handles or storage aliases
     * @param handle - Filestack handle
     * @param options - Preview options
     */
    /**
     * Used for viewing files via Filestack handles or storage aliases
     * @param {?} handle - Filestack handle
     * @param {?=} options - Preview options
     * @return {?}
     */
    FilestackService.prototype.preview = /**
     * Used for viewing files via Filestack handles or storage aliases
     * @param {?} handle - Filestack handle
     * @param {?=} options - Preview options
     * @return {?}
     */
    function (handle, options) {
        return this.client.preview(handle, options);
    };
    /**
     * Clear all current cloud sessions in the picker or
     * particular one if name is passed
     * @param name - Optional cloud name to be passed
     */
    /**
     * Clear all current cloud sessions in the picker or
     * particular one if name is passed
     * @param {?=} name - Optional cloud name to be passed
     * @return {?}
     */
    FilestackService.prototype.logout = /**
     * Clear all current cloud sessions in the picker or
     * particular one if name is passed
     * @param {?=} name - Optional cloud name to be passed
     * @return {?}
     */
    function (name) {
        return from(this.client.logout(name));
    };
    FilestackService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ FilestackService.ngInjectableDef = ɵɵdefineInjectable({ factory: function FilestackService_Factory() { return new FilestackService(); }, token: FilestackService, providedIn: "root" });
    return FilestackService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
var PickerBaseComponent = /** @class */ (function () {
    function PickerBaseComponent(filestackService) {
        this.filestackService = filestackService;
        this.uploadSuccess = new Subject();
        this.uploadError = new Subject();
    }
    /**
     * @return {?}
     */
    PickerBaseComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _a = this, apikey = _a.apikey, clientOptions = _a.clientOptions, filestackService = _a.filestackService;
        filestackService.init(apikey, clientOptions);
    };
    /**
     * @return {?}
     */
    PickerBaseComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        var picker = this.picker;
        if (picker) {
            picker.close();
        }
    };
    /** @nocollapse */
    PickerBaseComponent.ctorParameters = function () { return [
        { type: FilestackService, decorators: [{ type: Inject, args: [FilestackService,] }] }
    ]; };
    PickerBaseComponent.propDecorators = {
        apikey: [{ type: Input }],
        pickerOptions: [{ type: Input }],
        clientOptions: [{ type: Input }],
        file: [{ type: Input }],
        source: [{ type: Input }],
        uploadSuccess: [{ type: Output }],
        uploadError: [{ type: Output }]
    };
    return PickerBaseComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PickerOverlayComponent = /** @class */ (function (_super) {
    __extends(PickerOverlayComponent, _super);
    function PickerOverlayComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    PickerOverlayComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _a = this, filestackService = _a.filestackService, uploadSuccess = _a.uploadSuccess, pickerOptions = _a.pickerOptions;
        // Overwrite display mode to be always 'overlay' in this component
        this.picker = filestackService.picker(__assign({}, pickerOptions, { displayMode: PickerDisplayMode.overlay, onUploadDone: (/**
             * @param {?} res
             * @return {?}
             */
            function (res) { return uploadSuccess.next(res); }) }));
    };
    /**
     * @return {?}
     */
    PickerOverlayComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _a = this, picker = _a.picker, customRenderRef = _a.customRenderRef, uploadError = _a.uploadError;
        if (!customRenderRef.nativeElement.children.length) {
            // Picker open success handler there is ommited, because it's accessible from pickerOptions
            picker.open()
                .then(void (0))
                .catch((/**
             * @param {?} err
             * @return {?}
             */
            function (err) { return uploadError.next(err); }));
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PickerOverlayComponent.prototype.onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _a = this, picker = _a.picker, uploadError = _a.uploadError;
        event.stopPropagation();
        event.preventDefault();
        // Picker open success handler there is ommited, because it's accessible from pickerOptions
        picker.open()
            .then(void (0))
            .catch((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return uploadError.next(err); }));
    };
    PickerOverlayComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ng-picker-overlay',
                    template: '<div #customRender><ng-content class="ng-picker"></ng-content></div>',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    PickerOverlayComponent.propDecorators = {
        customRenderRef: [{ type: ViewChild, args: ['customRender', { static: false },] }],
        onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return PickerOverlayComponent;
}(PickerBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PickerDropPaneComponent = /** @class */ (function (_super) {
    __extends(PickerDropPaneComponent, _super);
    function PickerDropPaneComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    PickerDropPaneComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _a = this, filestackService = _a.filestackService, uploadSuccess = _a.uploadSuccess, uploadError = _a.uploadError, pickerOptions = _a.pickerOptions;
        // Overwrite display mode to be always 'dropPane' in this component
        this.picker = filestackService.picker(__assign({}, pickerOptions, { displayMode: PickerDisplayMode.dropPane, container: 'ng-picker-drop-pane-container', onUploadDone: (/**
             * @param {?} res
             * @return {?}
             */
            function (res) { return uploadSuccess.next(res); }) }));
        // Picker open success handler there is ommited, because it's accessible from pickerOptions
        this.picker.open()
            .then(void (0))
            .catch((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return uploadError.next(err); }));
    };
    PickerDropPaneComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ng-picker-drop-pane',
                    template: '<div id="ng-picker-drop-pane-container" class="ng-picker"></div>',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    return PickerDropPaneComponent;
}(PickerBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PickerInlineComponent = /** @class */ (function (_super) {
    __extends(PickerInlineComponent, _super);
    function PickerInlineComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    PickerInlineComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _a = this, filestackService = _a.filestackService, uploadSuccess = _a.uploadSuccess, uploadError = _a.uploadError, pickerOptions = _a.pickerOptions;
        // Overwrite display mode to be always 'inline' in this component
        this.picker = filestackService.picker(__assign({}, pickerOptions, { displayMode: PickerDisplayMode.inline, container: 'ng-picker-inline-container', onUploadDone: (/**
             * @param {?} res
             * @return {?}
             */
            function (res) { return uploadSuccess.next(res); }) }));
        // Picker open success handler there is ommited, because it's accessible from pickerOptions
        this.picker.open()
            .then(void (0))
            .catch((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return uploadError.next(err); }));
    };
    PickerInlineComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ng-picker-inline',
                    template: '<div id="ng-picker-inline-container" class="ng-picker"></div>',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    return PickerInlineComponent;
}(PickerBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FilestackTransformPipe = /** @class */ (function () {
    function FilestackTransformPipe(filestackService) {
        this.filestackService = filestackService;
    }
    /**
     * @param {?} value
     * @param {?=} transformOptions
     * @return {?}
     */
    FilestackTransformPipe.prototype.transform = /**
     * @param {?} value
     * @param {?=} transformOptions
     * @return {?}
     */
    function (value, transformOptions) {
        return this.filestackService.transform(value, transformOptions);
    };
    FilestackTransformPipe.decorators = [
        { type: Pipe, args: [{ name: 'filestackTransform' },] }
    ];
    /** @nocollapse */
    FilestackTransformPipe.ctorParameters = function () { return [
        { type: FilestackService }
    ]; };
    return FilestackTransformPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FilestackModule = /** @class */ (function () {
    function FilestackModule() {
    }
    FilestackModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                    ],
                    providers: [
                        FilestackService
                    ],
                    declarations: [
                        PickerOverlayComponent,
                        PickerInlineComponent,
                        PickerDropPaneComponent,
                        FilestackTransformPipe
                    ],
                    exports: [
                        PickerOverlayComponent,
                        PickerInlineComponent,
                        PickerDropPaneComponent,
                        FilestackTransformPipe
                    ]
                },] }
    ];
    return FilestackModule;
}());

export { FilestackModule, FilestackService, FilestackTransformPipe, PickerDropPaneComponent, PickerInlineComponent, PickerOverlayComponent, PickerBaseComponent as ɵa };
//# sourceMappingURL=filestack-angular.js.map
