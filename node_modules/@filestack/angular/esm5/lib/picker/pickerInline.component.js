/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ChangeDetectionStrategy } from '@angular/core';
import { PickerBaseComponent } from './pickerBase.component';
import { PickerDisplayMode } from 'filestack-js';
var PickerInlineComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PickerInlineComponent, _super);
    function PickerInlineComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    PickerInlineComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _a = this, filestackService = _a.filestackService, uploadSuccess = _a.uploadSuccess, uploadError = _a.uploadError, pickerOptions = _a.pickerOptions;
        // Overwrite display mode to be always 'inline' in this component
        this.picker = filestackService.picker(tslib_1.__assign({}, pickerOptions, { displayMode: PickerDisplayMode.inline, container: 'ng-picker-inline-container', onUploadDone: (/**
             * @param {?} res
             * @return {?}
             */
            function (res) { return uploadSuccess.next(res); }) }));
        // Picker open success handler there is ommited, because it's accessible from pickerOptions
        this.picker.open()
            .then(void (0))
            .catch((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return uploadError.next(err); }));
    };
    PickerInlineComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ng-picker-inline',
                    template: '<div id="ng-picker-inline-container" class="ng-picker"></div>',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    return PickerInlineComponent;
}(PickerBaseComponent));
export { PickerInlineComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlja2VySW5saW5lLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmaWxlc3RhY2svYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9waWNrZXIvcGlja2VySW5saW5lLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFDSCxTQUFTLEVBQ1QsdUJBQXVCLEVBRTFCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzdELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUNqRDtJQUsyQyxpREFBbUI7SUFMOUQ7O0lBc0JBLENBQUM7Ozs7SUFoQkcsa0RBQWtCOzs7SUFBbEI7UUFDUSxJQUFBLFNBQXNFLEVBQXBFLHNDQUFnQixFQUFFLGdDQUFhLEVBQUUsNEJBQVcsRUFBRSxnQ0FBc0I7UUFFNUUsaUVBQWlFO1FBQ2pFLElBQUksQ0FBQyxNQUFNLEdBQUcsZ0JBQWdCLENBQUMsTUFBTSxzQkFDaEMsYUFBYSxJQUNoQixXQUFXLEVBQUUsaUJBQWlCLENBQUMsTUFBTSxFQUNyQyxTQUFTLEVBQUUsNEJBQTRCLEVBQ3ZDLFlBQVk7Ozs7WUFBRSxVQUFBLEdBQUcsSUFBSSxPQUFBLGFBQWEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQXZCLENBQXVCLEtBQzVDLENBQUM7UUFFSCwyRkFBMkY7UUFDM0YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUU7YUFDZixJQUFJLENBQUMsS0FBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ2IsS0FBSzs7OztRQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBckIsQ0FBcUIsRUFBQyxDQUFDO0lBQ3pDLENBQUM7O2dCQXJCSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLGtCQUFrQjtvQkFDNUIsUUFBUSxFQUFFLCtEQUErRDtvQkFDekUsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2xEOztJQWtCRCw0QkFBQztDQUFBLEFBdEJELENBSzJDLG1CQUFtQixHQWlCN0Q7U0FqQlkscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDb21wb25lbnQsXG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgQWZ0ZXJDb250ZW50SW5pdFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBpY2tlckJhc2VDb21wb25lbnQgfSBmcm9tICcuL3BpY2tlckJhc2UuY29tcG9uZW50JztcbmltcG9ydCB7IFBpY2tlckRpc3BsYXlNb2RlIH0gZnJvbSAnZmlsZXN0YWNrLWpzJztcbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnbmctcGlja2VyLWlubGluZScsXG4gICAgdGVtcGxhdGU6ICc8ZGl2IGlkPVwibmctcGlja2VyLWlubGluZS1jb250YWluZXJcIiBjbGFzcz1cIm5nLXBpY2tlclwiPjwvZGl2PicsXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgUGlja2VySW5saW5lQ29tcG9uZW50IGV4dGVuZHMgUGlja2VyQmFzZUNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQge1xuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICAgIGNvbnN0IHsgZmlsZXN0YWNrU2VydmljZSwgdXBsb2FkU3VjY2VzcywgdXBsb2FkRXJyb3IsIHBpY2tlck9wdGlvbnMgfSA9IHRoaXM7XG5cbiAgICAgIC8vIE92ZXJ3cml0ZSBkaXNwbGF5IG1vZGUgdG8gYmUgYWx3YXlzICdpbmxpbmUnIGluIHRoaXMgY29tcG9uZW50XG4gICAgICB0aGlzLnBpY2tlciA9IGZpbGVzdGFja1NlcnZpY2UucGlja2VyKHtcbiAgICAgICAgLi4ucGlja2VyT3B0aW9ucyxcbiAgICAgICAgZGlzcGxheU1vZGU6IFBpY2tlckRpc3BsYXlNb2RlLmlubGluZSxcbiAgICAgICAgY29udGFpbmVyOiAnbmctcGlja2VyLWlubGluZS1jb250YWluZXInLFxuICAgICAgICBvblVwbG9hZERvbmU6IHJlcyA9PiB1cGxvYWRTdWNjZXNzLm5leHQocmVzKVxuICAgICAgfSk7XG5cbiAgICAgIC8vIFBpY2tlciBvcGVuIHN1Y2Nlc3MgaGFuZGxlciB0aGVyZSBpcyBvbW1pdGVkLCBiZWNhdXNlIGl0J3MgYWNjZXNzaWJsZSBmcm9tIHBpY2tlck9wdGlvbnNcbiAgICAgIHRoaXMucGlja2VyLm9wZW4oKVxuICAgICAgICAudGhlbih2b2lkKDApKVxuICAgICAgICAuY2F0Y2goZXJyID0+IHVwbG9hZEVycm9yLm5leHQoZXJyKSk7XG4gICAgfVxufVxuIl19