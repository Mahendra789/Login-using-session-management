/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ChangeDetectionStrategy, HostListener, ViewChild, ElementRef } from '@angular/core';
import { PickerBaseComponent } from './pickerBase.component';
import { PickerDisplayMode } from 'filestack-js';
var PickerOverlayComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PickerOverlayComponent, _super);
    function PickerOverlayComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    PickerOverlayComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _a = this, filestackService = _a.filestackService, uploadSuccess = _a.uploadSuccess, pickerOptions = _a.pickerOptions;
        // Overwrite display mode to be always 'overlay' in this component
        this.picker = filestackService.picker(tslib_1.__assign({}, pickerOptions, { displayMode: PickerDisplayMode.overlay, onUploadDone: (/**
             * @param {?} res
             * @return {?}
             */
            function (res) { return uploadSuccess.next(res); }) }));
    };
    /**
     * @return {?}
     */
    PickerOverlayComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _a = this, picker = _a.picker, customRenderRef = _a.customRenderRef, uploadError = _a.uploadError;
        if (!customRenderRef.nativeElement.children.length) {
            // Picker open success handler there is ommited, because it's accessible from pickerOptions
            picker.open()
                .then(void (0))
                .catch((/**
             * @param {?} err
             * @return {?}
             */
            function (err) { return uploadError.next(err); }));
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PickerOverlayComponent.prototype.onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _a = this, picker = _a.picker, uploadError = _a.uploadError;
        event.stopPropagation();
        event.preventDefault();
        // Picker open success handler there is ommited, because it's accessible from pickerOptions
        picker.open()
            .then(void (0))
            .catch((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return uploadError.next(err); }));
    };
    PickerOverlayComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ng-picker-overlay',
                    template: '<div #customRender><ng-content class="ng-picker"></ng-content></div>',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    PickerOverlayComponent.propDecorators = {
        customRenderRef: [{ type: ViewChild, args: ['customRender', { static: false },] }],
        onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return PickerOverlayComponent;
}(PickerBaseComponent));
export { PickerOverlayComponent };
if (false) {
    /** @type {?} */
    PickerOverlayComponent.prototype.customRenderRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlja2VyT3ZlcmxheS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmlsZXN0YWNrL2FuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvcGlja2VyL3BpY2tlck92ZXJsYXkuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUNILFNBQVMsRUFDVCx1QkFBdUIsRUFFdkIsWUFBWSxFQUNaLFNBQVMsRUFDVCxVQUFVLEVBRWIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ2pEO0lBSzRDLGtEQUFtQjtJQUwvRDs7SUF1Q0EsQ0FBQzs7OztJQS9CRyxtREFBa0I7OztJQUFsQjtRQUNRLElBQUEsU0FBeUQsRUFBdkQsc0NBQWdCLEVBQUUsZ0NBQWEsRUFBRSxnQ0FBc0I7UUFFL0Qsa0VBQWtFO1FBQ2xFLElBQUksQ0FBQyxNQUFNLEdBQUcsZ0JBQWdCLENBQUMsTUFBTSxzQkFDaEMsYUFBYSxJQUNoQixXQUFXLEVBQUUsaUJBQWlCLENBQUMsT0FBTyxFQUN0QyxZQUFZOzs7O1lBQUUsVUFBQSxHQUFHLElBQUksT0FBQSxhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUF2QixDQUF1QixLQUM1QyxDQUFDO0lBQ0wsQ0FBQzs7OztJQUVELGdEQUFlOzs7SUFBZjtRQUNRLElBQUEsU0FBNkMsRUFBNUMsa0JBQU0sRUFBRSxvQ0FBZSxFQUFFLDRCQUFtQjtRQUNuRCxJQUFJLENBQUMsZUFBZSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFO1lBQ2xELDJGQUEyRjtZQUMzRixNQUFNLENBQUMsSUFBSSxFQUFFO2lCQUNWLElBQUksQ0FBQyxLQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ2IsS0FBSzs7OztZQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBckIsQ0FBcUIsRUFBQyxDQUFDO1NBQ3hDO0lBQ0gsQ0FBQzs7Ozs7SUFHRCx3Q0FBTzs7OztJQURQLFVBQ1EsS0FBSztRQUNMLElBQUEsU0FBNEIsRUFBM0Isa0JBQU0sRUFBRSw0QkFBbUI7UUFDbEMsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ3hCLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN2QiwyRkFBMkY7UUFDM0YsTUFBTSxDQUFDLElBQUksRUFBRTthQUNWLElBQUksQ0FBQyxLQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDYixLQUFLOzs7O1FBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFyQixDQUFxQixFQUFDLENBQUM7SUFDekMsQ0FBQzs7Z0JBdENKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsbUJBQW1CO29CQUM3QixRQUFRLEVBQUUsc0VBQXNFO29CQUNoRixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtpQkFDbEQ7OztrQ0FFSSxTQUFTLFNBQUMsY0FBYyxFQUFFLEVBQUMsTUFBTSxFQUFFLEtBQUssRUFBQzswQkF1QnpDLFlBQVksU0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUM7O0lBVXJDLDZCQUFDO0NBQUEsQUF2Q0QsQ0FLNEMsbUJBQW1CLEdBa0M5RDtTQWxDWSxzQkFBc0I7OztJQUMvQixpREFBd0UiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENvbXBvbmVudCxcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgICBBZnRlclZpZXdJbml0LFxuICAgIEhvc3RMaXN0ZW5lcixcbiAgICBWaWV3Q2hpbGQsXG4gICAgRWxlbWVudFJlZixcbiAgICBBZnRlckNvbnRlbnRJbml0XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGlja2VyQmFzZUNvbXBvbmVudCB9IGZyb20gJy4vcGlja2VyQmFzZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgUGlja2VyRGlzcGxheU1vZGUgfSBmcm9tICdmaWxlc3RhY2stanMnO1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICduZy1waWNrZXItb3ZlcmxheScsXG4gICAgdGVtcGxhdGU6ICc8ZGl2ICNjdXN0b21SZW5kZXI+PG5nLWNvbnRlbnQgY2xhc3M9XCJuZy1waWNrZXJcIj48L25nLWNvbnRlbnQ+PC9kaXY+JyxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBQaWNrZXJPdmVybGF5Q29tcG9uZW50IGV4dGVuZHMgUGlja2VyQmFzZUNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIEFmdGVyVmlld0luaXQge1xuICAgIEBWaWV3Q2hpbGQoJ2N1c3RvbVJlbmRlcicsIHtzdGF0aWM6IGZhbHNlfSkgY3VzdG9tUmVuZGVyUmVmOiBFbGVtZW50UmVmO1xuXG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgICAgY29uc3QgeyBmaWxlc3RhY2tTZXJ2aWNlLCB1cGxvYWRTdWNjZXNzLCBwaWNrZXJPcHRpb25zIH0gPSB0aGlzO1xuXG4gICAgICAvLyBPdmVyd3JpdGUgZGlzcGxheSBtb2RlIHRvIGJlIGFsd2F5cyAnb3ZlcmxheScgaW4gdGhpcyBjb21wb25lbnRcbiAgICAgIHRoaXMucGlja2VyID0gZmlsZXN0YWNrU2VydmljZS5waWNrZXIoe1xuICAgICAgICAuLi5waWNrZXJPcHRpb25zLFxuICAgICAgICBkaXNwbGF5TW9kZTogUGlja2VyRGlzcGxheU1vZGUub3ZlcmxheSxcbiAgICAgICAgb25VcGxvYWREb25lOiByZXMgPT4gdXBsb2FkU3VjY2Vzcy5uZXh0KHJlcylcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICAgIGNvbnN0IHtwaWNrZXIsIGN1c3RvbVJlbmRlclJlZiwgdXBsb2FkRXJyb3J9ID0gdGhpcztcbiAgICAgIGlmICghY3VzdG9tUmVuZGVyUmVmLm5hdGl2ZUVsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgIC8vIFBpY2tlciBvcGVuIHN1Y2Nlc3MgaGFuZGxlciB0aGVyZSBpcyBvbW1pdGVkLCBiZWNhdXNlIGl0J3MgYWNjZXNzaWJsZSBmcm9tIHBpY2tlck9wdGlvbnNcbiAgICAgICAgcGlja2VyLm9wZW4oKVxuICAgICAgICAgIC50aGVuKHZvaWQoMCkpXG4gICAgICAgICAgLmNhdGNoKGVyciA9PiB1cGxvYWRFcnJvci5uZXh0KGVycikpO1xuICAgICAgfVxuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyckZXZlbnQnXSlcbiAgICBvbkNsaWNrKGV2ZW50KSB7XG4gICAgICBjb25zdCB7cGlja2VyLCB1cGxvYWRFcnJvcn0gPSB0aGlzO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgLy8gUGlja2VyIG9wZW4gc3VjY2VzcyBoYW5kbGVyIHRoZXJlIGlzIG9tbWl0ZWQsIGJlY2F1c2UgaXQncyBhY2Nlc3NpYmxlIGZyb20gcGlja2VyT3B0aW9uc1xuICAgICAgcGlja2VyLm9wZW4oKVxuICAgICAgICAudGhlbih2b2lkKDApKVxuICAgICAgICAuY2F0Y2goZXJyID0+IHVwbG9hZEVycm9yLm5leHQoZXJyKSk7XG4gICAgfVxufVxuIl19