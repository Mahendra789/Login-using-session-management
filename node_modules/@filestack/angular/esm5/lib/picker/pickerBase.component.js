/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input, Output, Inject } from '@angular/core';
import { Subject } from 'rxjs';
import { FilestackService } from '../filestack.service';
/**
 * @abstract
 */
var PickerBaseComponent = /** @class */ (function () {
    function PickerBaseComponent(filestackService) {
        this.filestackService = filestackService;
        this.uploadSuccess = new Subject();
        this.uploadError = new Subject();
    }
    /**
     * @return {?}
     */
    PickerBaseComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _a = this, apikey = _a.apikey, clientOptions = _a.clientOptions, filestackService = _a.filestackService;
        filestackService.init(apikey, clientOptions);
    };
    /**
     * @return {?}
     */
    PickerBaseComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        var picker = this.picker;
        if (picker) {
            picker.close();
        }
    };
    /** @nocollapse */
    PickerBaseComponent.ctorParameters = function () { return [
        { type: FilestackService, decorators: [{ type: Inject, args: [FilestackService,] }] }
    ]; };
    PickerBaseComponent.propDecorators = {
        apikey: [{ type: Input }],
        pickerOptions: [{ type: Input }],
        clientOptions: [{ type: Input }],
        file: [{ type: Input }],
        source: [{ type: Input }],
        uploadSuccess: [{ type: Output }],
        uploadError: [{ type: Output }]
    };
    return PickerBaseComponent;
}());
export { PickerBaseComponent };
if (false) {
    /** @type {?} */
    PickerBaseComponent.prototype.apikey;
    /** @type {?} */
    PickerBaseComponent.prototype.pickerOptions;
    /** @type {?} */
    PickerBaseComponent.prototype.clientOptions;
    /** @type {?} */
    PickerBaseComponent.prototype.file;
    /** @type {?} */
    PickerBaseComponent.prototype.source;
    /** @type {?} */
    PickerBaseComponent.prototype.uploadSuccess;
    /** @type {?} */
    PickerBaseComponent.prototype.uploadError;
    /** @type {?} */
    PickerBaseComponent.prototype.picker;
    /**
     * @type {?}
     * @protected
     */
    PickerBaseComponent.prototype.filestackService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlja2VyQmFzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmlsZXN0YWNrL2FuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvcGlja2VyL3BpY2tlckJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0wsS0FBSyxFQUNMLE1BQU0sRUFFTixNQUFNLEVBRVAsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQzs7OztBQVV4RDtJQVlFLDZCQUFnRCxnQkFBa0M7UUFBbEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNoRixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7UUFDbkMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO0lBQ25DLENBQUM7Ozs7SUFFRCxzQ0FBUTs7O0lBQVI7UUFDUSxJQUFBLFNBQWdELEVBQS9DLGtCQUFNLEVBQUUsZ0NBQWEsRUFBRSxzQ0FBd0I7UUFDdEQsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxhQUFhLENBQUMsQ0FBQztJQUMvQyxDQUFDOzs7O0lBRUQseUNBQVc7OztJQUFYO1FBQ1MsSUFBQSxvQkFBTTtRQUNiLElBQUksTUFBTSxFQUFFO1lBQ1YsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ2hCO0lBQ0gsQ0FBQzs7O2dCQXJDTSxnQkFBZ0IsdUJBc0JWLE1BQU0sU0FBQyxnQkFBZ0I7Ozt5QkFYbkMsS0FBSztnQ0FDTCxLQUFLO2dDQUNMLEtBQUs7dUJBQ0wsS0FBSzt5QkFDTCxLQUFLO2dDQUVMLE1BQU07OEJBQ04sTUFBTTs7SUFvQlQsMEJBQUM7Q0FBQSxBQTVCRCxJQTRCQztTQTVCcUIsbUJBQW1COzs7SUFDdkMscUNBQXdCOztJQUN4Qiw0Q0FBc0M7O0lBQ3RDLDRDQUFzQzs7SUFDdEMsbUNBQXlCOztJQUN6QixxQ0FBd0I7O0lBRXhCLDRDQUFpRDs7SUFDakQsMENBQStDOztJQUUvQyxxQ0FBdUI7Ozs7O0lBRVgsK0NBQXNFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgSW5wdXQsXG4gIE91dHB1dCxcbiAgT25Jbml0LFxuICBJbmplY3QsXG4gIE9uRGVzdHJveVxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEZpbGVzdGFja1NlcnZpY2UgfSBmcm9tICcuLi9maWxlc3RhY2suc2VydmljZSc7XG5pbXBvcnQge1xuICBQaWNrZXJJbnN0YW5jZSxcbiAgUGlja2VyT3B0aW9ucyxcbiAgQ2xpZW50T3B0aW9ucyxcbiAgSW5wdXRGaWxlLFxuICBQaWNrZXJSZXNwb25zZSxcbiAgRmlsZXN0YWNrRXJyb3Jcbn0gZnJvbSAnZmlsZXN0YWNrLWpzJztcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFBpY2tlckJhc2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIEBJbnB1dCgpIGFwaWtleTogc3RyaW5nO1xuICBASW5wdXQoKSBwaWNrZXJPcHRpb25zOiBQaWNrZXJPcHRpb25zO1xuICBASW5wdXQoKSBjbGllbnRPcHRpb25zOiBDbGllbnRPcHRpb25zO1xuICBASW5wdXQoKSBmaWxlOiBJbnB1dEZpbGU7XG4gIEBJbnB1dCgpIHNvdXJjZTogc3RyaW5nO1xuXG4gIEBPdXRwdXQoKSB1cGxvYWRTdWNjZXNzOiBTdWJqZWN0PFBpY2tlclJlc3BvbnNlPjtcbiAgQE91dHB1dCgpIHVwbG9hZEVycm9yOiBTdWJqZWN0PEZpbGVzdGFja0Vycm9yPjtcblxuICBwaWNrZXI6IFBpY2tlckluc3RhbmNlO1xuXG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoRmlsZXN0YWNrU2VydmljZSkgcHJvdGVjdGVkIGZpbGVzdGFja1NlcnZpY2U6IEZpbGVzdGFja1NlcnZpY2UpIHtcbiAgICB0aGlzLnVwbG9hZFN1Y2Nlc3MgPSBuZXcgU3ViamVjdCgpO1xuICAgIHRoaXMudXBsb2FkRXJyb3IgPSBuZXcgU3ViamVjdCgpO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgY29uc3Qge2FwaWtleSwgY2xpZW50T3B0aW9ucywgZmlsZXN0YWNrU2VydmljZX0gPSB0aGlzO1xuICAgIGZpbGVzdGFja1NlcnZpY2UuaW5pdChhcGlrZXksIGNsaWVudE9wdGlvbnMpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgY29uc3Qge3BpY2tlcn0gPSB0aGlzO1xuICAgIGlmIChwaWNrZXIpIHtcbiAgICAgIHBpY2tlci5jbG9zZSgpO1xuICAgIH1cbiAgfVxufVxuIl19