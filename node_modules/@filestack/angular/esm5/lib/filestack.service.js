/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { from } from 'rxjs';
import { init } from 'filestack-js';
import * as i0 from "@angular/core";
var FilestackService = /** @class */ (function () {
    function FilestackService() {
    }
    Object.defineProperty(FilestackService.prototype, "client", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            if (!this.clientInstance) {
                throw new Error('FilestackService: client does not exist. Please initialize service via init method.');
            }
            return this.clientInstance;
        },
        set: /**
         * @private
         * @param {?} client
         * @return {?}
         */
        function (client) {
            this.clientInstance = client;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Set another client instance as this one used by FilestackService
     * @param client - An instance of filestack client class
     */
    /**
     * Set another client instance as this one used by FilestackService
     * @param {?} client - An instance of filestack client class
     * @return {?}
     */
    FilestackService.prototype.setClientInstance = /**
     * Set another client instance as this one used by FilestackService
     * @param {?} client - An instance of filestack client class
     * @return {?}
     */
    function (client) {
        if (client) {
            this.client = client;
        }
    };
    /**
     * Initialize filestack client
     * @param apikey - Filestack apikey
     * @param clientOptions - Client options
     */
    /**
     * Initialize filestack client
     * @param {?} apikey - Filestack apikey
     * @param {?=} clientOptions - Client options
     * @return {?}
     */
    FilestackService.prototype.init = /**
     * Initialize filestack client
     * @param {?} apikey - Filestack apikey
     * @param {?=} clientOptions - Client options
     * @return {?}
     */
    function (apikey, clientOptions) {
        this.client = init(apikey, clientOptions);
    };
    /**
     * Instance of picker class
     * @param options - picker options
     */
    /**
     * Instance of picker class
     * @param {?=} options - picker options
     * @return {?}
     */
    FilestackService.prototype.picker = /**
     * Instance of picker class
     * @param {?=} options - picker options
     * @return {?}
     */
    function (options) {
        return this.client.picker(options);
    };
    /**
     * Generate url with filestack transformations
     * @param url - Filestack handle or external url
     * @param options - Transformation options
     * @param b64 - Encode url params in base64
     */
    /**
     * Generate url with filestack transformations
     * @param {?} url - Filestack handle or external url
     * @param {?} options - Transformation options
     * @param {?=} b64 - Encode url params in base64
     * @return {?}
     */
    FilestackService.prototype.transform = /**
     * Generate url with filestack transformations
     * @param {?} url - Filestack handle or external url
     * @param {?} options - Transformation options
     * @param {?=} b64 - Encode url params in base64
     * @return {?}
     */
    function (url, options, b64) {
        return this.client.transform(url, options, b64);
    };
    /**
     * Access files via their Filestack handles
     * @param handle - Filestack handle
     * @param options - Retrieve options
     * @param security - Filestack security object
     */
    /**
     * Access files via their Filestack handles
     * @param {?} handle - Filestack handle
     * @param {?=} options - Retrieve options
     * @param {?=} security - Filestack security object
     * @return {?}
     */
    FilestackService.prototype.retrieve = /**
     * Access files via their Filestack handles
     * @param {?} handle - Filestack handle
     * @param {?=} options - Retrieve options
     * @param {?=} security - Filestack security object
     * @return {?}
     */
    function (handle, options, security) {
        return from(this.client.retrieve(handle, options, security));
    };
    /**
     * Retrieve detailed data of stored files
     * @param handle - Filestack handle
     * @param options - Metadata options
     * @param security - Filestack security object
     */
    /**
     * Retrieve detailed data of stored files
     * @param {?} handle - Filestack handle
     * @param {?=} options - Metadata options
     * @param {?=} security - Filestack security object
     * @return {?}
     */
    FilestackService.prototype.metadata = /**
     * Retrieve detailed data of stored files
     * @param {?} handle - Filestack handle
     * @param {?=} options - Metadata options
     * @param {?=} security - Filestack security object
     * @return {?}
     */
    function (handle, options, security) {
        return from(this.client.metadata(handle, options, security));
    };
    /**
     * Store a file from its URL
     * @param url - Valid url to file
     * @param options - Store params
     * @param token - Optional control token to call .cancel()
     * @param security - Filestack security object
     */
    /**
     * Store a file from its URL
     * @param {?} url - Valid url to file
     * @param {?=} options - Store params
     * @param {?=} token - Optional control token to call .cancel()
     * @param {?=} security - Filestack security object
     * @return {?}
     */
    FilestackService.prototype.storeURL = /**
     * Store a file from its URL
     * @param {?} url - Valid url to file
     * @param {?=} options - Store params
     * @param {?=} token - Optional control token to call .cancel()
     * @param {?=} security - Filestack security object
     * @return {?}
     */
    function (url, options, token, security) {
        return from(this.client.storeURL(url, options, token, security));
    };
    /**
     * Upload a provided file
     * @param file - A file to upload
     * @param options - Upload options
     * @param storeOptions - Store options
     * @param token - Optional control token to call .cancel()
     * @param security - Filestack security object
     */
    /**
     * Upload a provided file
     * @param {?} file - A file to upload
     * @param {?=} options - Upload options
     * @param {?=} storeOptions - Store options
     * @param {?=} token - Optional control token to call .cancel()
     * @param {?=} security - Filestack security object
     * @return {?}
     */
    FilestackService.prototype.upload = /**
     * Upload a provided file
     * @param {?} file - A file to upload
     * @param {?=} options - Upload options
     * @param {?=} storeOptions - Store options
     * @param {?=} token - Optional control token to call .cancel()
     * @param {?=} security - Filestack security object
     * @return {?}
     */
    function (file, options, storeOptions, token, security) {
        return from(this.client.upload(file, options, storeOptions, token, security));
    };
    /**
     * Remove a file from storage and the Filestack system
     * @param handle - Filestack handle
     * @param security - Filestack security object
     */
    /**
     * Remove a file from storage and the Filestack system
     * @param {?} handle - Filestack handle
     * @param {?} security - Filestack security object
     * @return {?}
     */
    FilestackService.prototype.remove = /**
     * Remove a file from storage and the Filestack system
     * @param {?} handle - Filestack handle
     * @param {?} security - Filestack security object
     * @return {?}
     */
    function (handle, security) {
        return from(this.client.remove(handle, security));
    };
    /**
     * Remove a file only from the Filestack system. The file remains in storage
     * @param handle - Filestack handle
     * @param security - Filestack security object
     */
    /**
     * Remove a file only from the Filestack system. The file remains in storage
     * @param {?} handle - Filestack handle
     * @param {?} security - Filestack security object
     * @return {?}
     */
    FilestackService.prototype.removeMetadata = /**
     * Remove a file only from the Filestack system. The file remains in storage
     * @param {?} handle - Filestack handle
     * @param {?} security - Filestack security object
     * @return {?}
     */
    function (handle, security) {
        return from(this.client.removeMetadata(handle, security));
    };
    /**
     * Used for viewing files via Filestack handles or storage aliases
     * @param handle - Filestack handle
     * @param options - Preview options
     */
    /**
     * Used for viewing files via Filestack handles or storage aliases
     * @param {?} handle - Filestack handle
     * @param {?=} options - Preview options
     * @return {?}
     */
    FilestackService.prototype.preview = /**
     * Used for viewing files via Filestack handles or storage aliases
     * @param {?} handle - Filestack handle
     * @param {?=} options - Preview options
     * @return {?}
     */
    function (handle, options) {
        return this.client.preview(handle, options);
    };
    /**
     * Clear all current cloud sessions in the picker or
     * particular one if name is passed
     * @param name - Optional cloud name to be passed
     */
    /**
     * Clear all current cloud sessions in the picker or
     * particular one if name is passed
     * @param {?=} name - Optional cloud name to be passed
     * @return {?}
     */
    FilestackService.prototype.logout = /**
     * Clear all current cloud sessions in the picker or
     * particular one if name is passed
     * @param {?=} name - Optional cloud name to be passed
     * @return {?}
     */
    function (name) {
        return from(this.client.logout(name));
    };
    FilestackService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ FilestackService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function FilestackService_Factory() { return new FilestackService(); }, token: FilestackService, providedIn: "root" });
    return FilestackService;
}());
export { FilestackService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FilestackService.prototype.clientInstance;
}
//# sourceMappingURL=data:application/json;base64,