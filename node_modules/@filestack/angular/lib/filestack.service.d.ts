import { Observable } from 'rxjs';
import { PickerOptions, PickerInstance, StoreParams, TransformOptions, InputFile, RetrieveOptions, MetadataOptions, Security, UploadOptions, StoreUploadOptions, PreviewOptions, ClientOptions, Client } from 'filestack-js';
export declare class FilestackService {
    private clientInstance;
    private client;
    /**
     * Set another client instance as this one used by FilestackService
     * @param client - An instance of filestack client class
     */
    setClientInstance(client: Client): void;
    /**
     * Initialize filestack client
     * @param apikey - Filestack apikey
     * @param clientOptions - Client options
     */
    init(apikey: string, clientOptions?: ClientOptions): void;
    /**
     * Instance of picker class
     * @param options - picker options
     */
    picker(options?: PickerOptions): PickerInstance;
    /**
     * Generate url with filestack transformations
     * @param url - Filestack handle or external url
     * @param options - Transformation options
     * @param b64 - Encode url params in base64
     */
    transform(url: string | string[], options: TransformOptions, b64?: boolean): string;
    /**
     * Access files via their Filestack handles
     * @param handle - Filestack handle
     * @param options - Retrieve options
     * @param security - Filestack security object
     */
    retrieve(handle: string, options?: RetrieveOptions, security?: Security): Observable<object | Blob>;
    /**
     * Retrieve detailed data of stored files
     * @param handle - Filestack handle
     * @param options - Metadata options
     * @param security - Filestack security object
     */
    metadata(handle: string, options?: MetadataOptions, security?: Security): Observable<object>;
    /**
     * Store a file from its URL
     * @param url - Valid url to file
     * @param options - Store params
     * @param token - Optional control token to call .cancel()
     * @param security - Filestack security object
     */
    storeURL(url: string, options?: StoreParams, token?: string, security?: Security): Observable<object>;
    /**
     * Upload a provided file
     * @param file - A file to upload
     * @param options - Upload options
     * @param storeOptions - Store options
     * @param token - Optional control token to call .cancel()
     * @param security - Filestack security object
     */
    upload(file: InputFile, options?: UploadOptions, storeOptions?: StoreUploadOptions, token?: string, security?: Security): Observable<object>;
    /**
     * Remove a file from storage and the Filestack system
     * @param handle - Filestack handle
     * @param security - Filestack security object
     */
    remove(handle: string, security: Security): Observable<object>;
    /**
     * Remove a file only from the Filestack system. The file remains in storage
     * @param handle - Filestack handle
     * @param security - Filestack security object
     */
    removeMetadata(handle: string, security: Security): Observable<object>;
    /**
     * Used for viewing files via Filestack handles or storage aliases
     * @param handle - Filestack handle
     * @param options - Preview options
     */
    preview(handle: string, options?: PreviewOptions): HTMLIFrameElement | Window;
    /**
     * Clear all current cloud sessions in the picker or
     * particular one if name is passed
     * @param name - Optional cloud name to be passed
     */
    logout(name?: string): Observable<object>;
}
