(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('filestack-js'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@filestack/angular', ['exports', '@angular/core', 'rxjs', 'filestack-js', '@angular/common'], factory) :
    (global = global || self, factory((global.filestack = global.filestack || {}, global.filestack.angular = {}), global.ng.core, global.rxjs, global.filestackJs, global.ng.common));
}(this, function (exports, core, rxjs, filestackJs, common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FilestackService = /** @class */ (function () {
        function FilestackService() {
        }
        Object.defineProperty(FilestackService.prototype, "client", {
            get: /**
             * @private
             * @return {?}
             */
            function () {
                if (!this.clientInstance) {
                    throw new Error('FilestackService: client does not exist. Please initialize service via init method.');
                }
                return this.clientInstance;
            },
            set: /**
             * @private
             * @param {?} client
             * @return {?}
             */
            function (client) {
                this.clientInstance = client;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Set another client instance as this one used by FilestackService
         * @param client - An instance of filestack client class
         */
        /**
         * Set another client instance as this one used by FilestackService
         * @param {?} client - An instance of filestack client class
         * @return {?}
         */
        FilestackService.prototype.setClientInstance = /**
         * Set another client instance as this one used by FilestackService
         * @param {?} client - An instance of filestack client class
         * @return {?}
         */
        function (client) {
            if (client) {
                this.client = client;
            }
        };
        /**
         * Initialize filestack client
         * @param apikey - Filestack apikey
         * @param clientOptions - Client options
         */
        /**
         * Initialize filestack client
         * @param {?} apikey - Filestack apikey
         * @param {?=} clientOptions - Client options
         * @return {?}
         */
        FilestackService.prototype.init = /**
         * Initialize filestack client
         * @param {?} apikey - Filestack apikey
         * @param {?=} clientOptions - Client options
         * @return {?}
         */
        function (apikey, clientOptions) {
            this.client = filestackJs.init(apikey, clientOptions);
        };
        /**
         * Instance of picker class
         * @param options - picker options
         */
        /**
         * Instance of picker class
         * @param {?=} options - picker options
         * @return {?}
         */
        FilestackService.prototype.picker = /**
         * Instance of picker class
         * @param {?=} options - picker options
         * @return {?}
         */
        function (options) {
            return this.client.picker(options);
        };
        /**
         * Generate url with filestack transformations
         * @param url - Filestack handle or external url
         * @param options - Transformation options
         * @param b64 - Encode url params in base64
         */
        /**
         * Generate url with filestack transformations
         * @param {?} url - Filestack handle or external url
         * @param {?} options - Transformation options
         * @param {?=} b64 - Encode url params in base64
         * @return {?}
         */
        FilestackService.prototype.transform = /**
         * Generate url with filestack transformations
         * @param {?} url - Filestack handle or external url
         * @param {?} options - Transformation options
         * @param {?=} b64 - Encode url params in base64
         * @return {?}
         */
        function (url, options, b64) {
            return this.client.transform(url, options, b64);
        };
        /**
         * Access files via their Filestack handles
         * @param handle - Filestack handle
         * @param options - Retrieve options
         * @param security - Filestack security object
         */
        /**
         * Access files via their Filestack handles
         * @param {?} handle - Filestack handle
         * @param {?=} options - Retrieve options
         * @param {?=} security - Filestack security object
         * @return {?}
         */
        FilestackService.prototype.retrieve = /**
         * Access files via their Filestack handles
         * @param {?} handle - Filestack handle
         * @param {?=} options - Retrieve options
         * @param {?=} security - Filestack security object
         * @return {?}
         */
        function (handle, options, security) {
            return rxjs.from(this.client.retrieve(handle, options, security));
        };
        /**
         * Retrieve detailed data of stored files
         * @param handle - Filestack handle
         * @param options - Metadata options
         * @param security - Filestack security object
         */
        /**
         * Retrieve detailed data of stored files
         * @param {?} handle - Filestack handle
         * @param {?=} options - Metadata options
         * @param {?=} security - Filestack security object
         * @return {?}
         */
        FilestackService.prototype.metadata = /**
         * Retrieve detailed data of stored files
         * @param {?} handle - Filestack handle
         * @param {?=} options - Metadata options
         * @param {?=} security - Filestack security object
         * @return {?}
         */
        function (handle, options, security) {
            return rxjs.from(this.client.metadata(handle, options, security));
        };
        /**
         * Store a file from its URL
         * @param url - Valid url to file
         * @param options - Store params
         * @param token - Optional control token to call .cancel()
         * @param security - Filestack security object
         */
        /**
         * Store a file from its URL
         * @param {?} url - Valid url to file
         * @param {?=} options - Store params
         * @param {?=} token - Optional control token to call .cancel()
         * @param {?=} security - Filestack security object
         * @return {?}
         */
        FilestackService.prototype.storeURL = /**
         * Store a file from its URL
         * @param {?} url - Valid url to file
         * @param {?=} options - Store params
         * @param {?=} token - Optional control token to call .cancel()
         * @param {?=} security - Filestack security object
         * @return {?}
         */
        function (url, options, token, security) {
            return rxjs.from(this.client.storeURL(url, options, token, security));
        };
        /**
         * Upload a provided file
         * @param file - A file to upload
         * @param options - Upload options
         * @param storeOptions - Store options
         * @param token - Optional control token to call .cancel()
         * @param security - Filestack security object
         */
        /**
         * Upload a provided file
         * @param {?} file - A file to upload
         * @param {?=} options - Upload options
         * @param {?=} storeOptions - Store options
         * @param {?=} token - Optional control token to call .cancel()
         * @param {?=} security - Filestack security object
         * @return {?}
         */
        FilestackService.prototype.upload = /**
         * Upload a provided file
         * @param {?} file - A file to upload
         * @param {?=} options - Upload options
         * @param {?=} storeOptions - Store options
         * @param {?=} token - Optional control token to call .cancel()
         * @param {?=} security - Filestack security object
         * @return {?}
         */
        function (file, options, storeOptions, token, security) {
            return rxjs.from(this.client.upload(file, options, storeOptions, token, security));
        };
        /**
         * Remove a file from storage and the Filestack system
         * @param handle - Filestack handle
         * @param security - Filestack security object
         */
        /**
         * Remove a file from storage and the Filestack system
         * @param {?} handle - Filestack handle
         * @param {?} security - Filestack security object
         * @return {?}
         */
        FilestackService.prototype.remove = /**
         * Remove a file from storage and the Filestack system
         * @param {?} handle - Filestack handle
         * @param {?} security - Filestack security object
         * @return {?}
         */
        function (handle, security) {
            return rxjs.from(this.client.remove(handle, security));
        };
        /**
         * Remove a file only from the Filestack system. The file remains in storage
         * @param handle - Filestack handle
         * @param security - Filestack security object
         */
        /**
         * Remove a file only from the Filestack system. The file remains in storage
         * @param {?} handle - Filestack handle
         * @param {?} security - Filestack security object
         * @return {?}
         */
        FilestackService.prototype.removeMetadata = /**
         * Remove a file only from the Filestack system. The file remains in storage
         * @param {?} handle - Filestack handle
         * @param {?} security - Filestack security object
         * @return {?}
         */
        function (handle, security) {
            return rxjs.from(this.client.removeMetadata(handle, security));
        };
        /**
         * Used for viewing files via Filestack handles or storage aliases
         * @param handle - Filestack handle
         * @param options - Preview options
         */
        /**
         * Used for viewing files via Filestack handles or storage aliases
         * @param {?} handle - Filestack handle
         * @param {?=} options - Preview options
         * @return {?}
         */
        FilestackService.prototype.preview = /**
         * Used for viewing files via Filestack handles or storage aliases
         * @param {?} handle - Filestack handle
         * @param {?=} options - Preview options
         * @return {?}
         */
        function (handle, options) {
            return this.client.preview(handle, options);
        };
        /**
         * Clear all current cloud sessions in the picker or
         * particular one if name is passed
         * @param name - Optional cloud name to be passed
         */
        /**
         * Clear all current cloud sessions in the picker or
         * particular one if name is passed
         * @param {?=} name - Optional cloud name to be passed
         * @return {?}
         */
        FilestackService.prototype.logout = /**
         * Clear all current cloud sessions in the picker or
         * particular one if name is passed
         * @param {?=} name - Optional cloud name to be passed
         * @return {?}
         */
        function (name) {
            return rxjs.from(this.client.logout(name));
        };
        FilestackService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */ FilestackService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function FilestackService_Factory() { return new FilestackService(); }, token: FilestackService, providedIn: "root" });
        return FilestackService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var PickerBaseComponent = /** @class */ (function () {
        function PickerBaseComponent(filestackService) {
            this.filestackService = filestackService;
            this.uploadSuccess = new rxjs.Subject();
            this.uploadError = new rxjs.Subject();
        }
        /**
         * @return {?}
         */
        PickerBaseComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            var _a = this, apikey = _a.apikey, clientOptions = _a.clientOptions, filestackService = _a.filestackService;
            filestackService.init(apikey, clientOptions);
        };
        /**
         * @return {?}
         */
        PickerBaseComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            var picker = this.picker;
            if (picker) {
                picker.close();
            }
        };
        /** @nocollapse */
        PickerBaseComponent.ctorParameters = function () { return [
            { type: FilestackService, decorators: [{ type: core.Inject, args: [FilestackService,] }] }
        ]; };
        PickerBaseComponent.propDecorators = {
            apikey: [{ type: core.Input }],
            pickerOptions: [{ type: core.Input }],
            clientOptions: [{ type: core.Input }],
            file: [{ type: core.Input }],
            source: [{ type: core.Input }],
            uploadSuccess: [{ type: core.Output }],
            uploadError: [{ type: core.Output }]
        };
        return PickerBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PickerOverlayComponent = /** @class */ (function (_super) {
        __extends(PickerOverlayComponent, _super);
        function PickerOverlayComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @return {?}
         */
        PickerOverlayComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
        function () {
            var _a = this, filestackService = _a.filestackService, uploadSuccess = _a.uploadSuccess, pickerOptions = _a.pickerOptions;
            // Overwrite display mode to be always 'overlay' in this component
            this.picker = filestackService.picker(__assign({}, pickerOptions, { displayMode: filestackJs.PickerDisplayMode.overlay, onUploadDone: (/**
                 * @param {?} res
                 * @return {?}
                 */
                function (res) { return uploadSuccess.next(res); }) }));
        };
        /**
         * @return {?}
         */
        PickerOverlayComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            var _a = this, picker = _a.picker, customRenderRef = _a.customRenderRef, uploadError = _a.uploadError;
            if (!customRenderRef.nativeElement.children.length) {
                // Picker open success handler there is ommited, because it's accessible from pickerOptions
                picker.open()
                    .then(void (0))
                    .catch((/**
                 * @param {?} err
                 * @return {?}
                 */
                function (err) { return uploadError.next(err); }));
            }
        };
        /**
         * @param {?} event
         * @return {?}
         */
        PickerOverlayComponent.prototype.onClick = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            var _a = this, picker = _a.picker, uploadError = _a.uploadError;
            event.stopPropagation();
            event.preventDefault();
            // Picker open success handler there is ommited, because it's accessible from pickerOptions
            picker.open()
                .then(void (0))
                .catch((/**
             * @param {?} err
             * @return {?}
             */
            function (err) { return uploadError.next(err); }));
        };
        PickerOverlayComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ng-picker-overlay',
                        template: '<div #customRender><ng-content class="ng-picker"></ng-content></div>',
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        PickerOverlayComponent.propDecorators = {
            customRenderRef: [{ type: core.ViewChild, args: ['customRender', { static: false },] }],
            onClick: [{ type: core.HostListener, args: ['click', ['$event'],] }]
        };
        return PickerOverlayComponent;
    }(PickerBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PickerDropPaneComponent = /** @class */ (function (_super) {
        __extends(PickerDropPaneComponent, _super);
        function PickerDropPaneComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @return {?}
         */
        PickerDropPaneComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
        function () {
            var _a = this, filestackService = _a.filestackService, uploadSuccess = _a.uploadSuccess, uploadError = _a.uploadError, pickerOptions = _a.pickerOptions;
            // Overwrite display mode to be always 'dropPane' in this component
            this.picker = filestackService.picker(__assign({}, pickerOptions, { displayMode: filestackJs.PickerDisplayMode.dropPane, container: 'ng-picker-drop-pane-container', onUploadDone: (/**
                 * @param {?} res
                 * @return {?}
                 */
                function (res) { return uploadSuccess.next(res); }) }));
            // Picker open success handler there is ommited, because it's accessible from pickerOptions
            this.picker.open()
                .then(void (0))
                .catch((/**
             * @param {?} err
             * @return {?}
             */
            function (err) { return uploadError.next(err); }));
        };
        PickerDropPaneComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ng-picker-drop-pane',
                        template: '<div id="ng-picker-drop-pane-container" class="ng-picker"></div>',
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        return PickerDropPaneComponent;
    }(PickerBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PickerInlineComponent = /** @class */ (function (_super) {
        __extends(PickerInlineComponent, _super);
        function PickerInlineComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @return {?}
         */
        PickerInlineComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
        function () {
            var _a = this, filestackService = _a.filestackService, uploadSuccess = _a.uploadSuccess, uploadError = _a.uploadError, pickerOptions = _a.pickerOptions;
            // Overwrite display mode to be always 'inline' in this component
            this.picker = filestackService.picker(__assign({}, pickerOptions, { displayMode: filestackJs.PickerDisplayMode.inline, container: 'ng-picker-inline-container', onUploadDone: (/**
                 * @param {?} res
                 * @return {?}
                 */
                function (res) { return uploadSuccess.next(res); }) }));
            // Picker open success handler there is ommited, because it's accessible from pickerOptions
            this.picker.open()
                .then(void (0))
                .catch((/**
             * @param {?} err
             * @return {?}
             */
            function (err) { return uploadError.next(err); }));
        };
        PickerInlineComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ng-picker-inline',
                        template: '<div id="ng-picker-inline-container" class="ng-picker"></div>',
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        return PickerInlineComponent;
    }(PickerBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FilestackTransformPipe = /** @class */ (function () {
        function FilestackTransformPipe(filestackService) {
            this.filestackService = filestackService;
        }
        /**
         * @param {?} value
         * @param {?=} transformOptions
         * @return {?}
         */
        FilestackTransformPipe.prototype.transform = /**
         * @param {?} value
         * @param {?=} transformOptions
         * @return {?}
         */
        function (value, transformOptions) {
            return this.filestackService.transform(value, transformOptions);
        };
        FilestackTransformPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'filestackTransform' },] }
        ];
        /** @nocollapse */
        FilestackTransformPipe.ctorParameters = function () { return [
            { type: FilestackService }
        ]; };
        return FilestackTransformPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FilestackModule = /** @class */ (function () {
        function FilestackModule() {
        }
        FilestackModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                        ],
                        providers: [
                            FilestackService
                        ],
                        declarations: [
                            PickerOverlayComponent,
                            PickerInlineComponent,
                            PickerDropPaneComponent,
                            FilestackTransformPipe
                        ],
                        exports: [
                            PickerOverlayComponent,
                            PickerInlineComponent,
                            PickerDropPaneComponent,
                            FilestackTransformPipe
                        ]
                    },] }
        ];
        return FilestackModule;
    }());

    exports.FilestackModule = FilestackModule;
    exports.FilestackService = FilestackService;
    exports.FilestackTransformPipe = FilestackTransformPipe;
    exports.PickerDropPaneComponent = PickerDropPaneComponent;
    exports.PickerInlineComponent = PickerInlineComponent;
    exports.PickerOverlayComponent = PickerOverlayComponent;
    exports.ɵa = PickerBaseComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=filestack-angular.umd.js.map
